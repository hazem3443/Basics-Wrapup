
ATI_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ac  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004518  08004518  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004518  08004518  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004518  08004518  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001214  20000080  080045a0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001294  080045a0  00021294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e50  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae7  00000000  00000000  00032ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000359e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00036818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001999b  00000000  00000000  00037528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1da  00000000  00000000  00050ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090732  00000000  00000000  0006009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f07cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f1c  00000000  00000000  000f0824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080043a4 	.word	0x080043a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080043a4 	.word	0x080043a4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db0b      	blt.n	8000a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	4906      	ldr	r1, [pc, #24]	; (8000a70 <__NVIC_EnableIRQ+0x34>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <UART_Init>:
 *      Author: Hazem
 */

#include "UART.h"

void UART_Init(unsigned short uart,unsigned long BR ){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	; 0x40
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
	// INIT UART
	//Enable the alternate function for PINs
	__disable_irq();
	RCC->APB2ENR |= 1;
 8000a84:	4b5f      	ldr	r3, [pc, #380]	; (8000c04 <UART_Init+0x190>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a5e      	ldr	r2, [pc, #376]	; (8000c04 <UART_Init+0x190>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6193      	str	r3, [r2, #24]

	USART_TypeDef * USARTx[] = {USART1,USART2,USART3};
 8000a90:	4a5d      	ldr	r2, [pc, #372]	; (8000c08 <UART_Init+0x194>)
 8000a92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	unsigned long ENR []= {(1<<14), (1<<17), (1<<18)};
 8000a9c:	4a5b      	ldr	r2, [pc, #364]	; (8000c0c <UART_Init+0x198>)
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//if we use uart1 clock is 72MHZ else 36MHZ
	//UART1 PA9 (Tx),PA10 (Rx)
	//UART2 PA2 (Tx),PA3 (Rx)
	//UART3 PB10 (Tx),PB11 (Rx)
	char Tx_Rx_pins [3][2] = {{9,10},{2,3},{10,11}};
 8000aa8:	4a59      	ldr	r2, [pc, #356]	; (8000c10 <UART_Init+0x19c>)
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab2:	6018      	str	r0, [r3, #0]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	8019      	strh	r1, [r3, #0]

	volatile uint32_t * APB[] = {&(RCC->APB2ENR),&(RCC->APB1ENR),&(RCC->APB1ENR)};
 8000ab8:	4a56      	ldr	r2, [pc, #344]	; (8000c14 <UART_Init+0x1a0>)
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//enable Clock for the related UART
	*(APB[uart-1]) |= ENR[uart-1];
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ace:	4413      	add	r3, r2
 8000ad0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000ad4:	6819      	ldr	r1, [r3, #0]
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ae0:	4413      	add	r3, r2
 8000ae2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000af0:	4403      	add	r3, r0
 8000af2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000af6:	430a      	orrs	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]

	unsigned char P [] = {PA, PA, PB};
 8000afa:	4a47      	ldr	r2, [pc, #284]	; (8000c18 <UART_Init+0x1a4>)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	4611      	mov	r1, r2
 8000b04:	8019      	strh	r1, [r3, #0]
 8000b06:	3302      	adds	r3, #2
 8000b08:	0c12      	lsrs	r2, r2, #16
 8000b0a:	701a      	strb	r2, [r3, #0]

	init_GP((P[uart-1]), Tx_Rx_pins[uart-1][0], OUT50, O_AF_PP);
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b14:	4413      	add	r3, r2
 8000b16:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000b1a:	b298      	uxth	r0, r3
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b26:	4413      	add	r3, r2
 8000b28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	2302      	movs	r3, #2
 8000b30:	2203      	movs	r2, #3
 8000b32:	f000 f9df 	bl	8000ef4 <init_GP>
	init_GP((P[uart-1]), Tx_Rx_pins[uart-1][1], IN, I_PP);
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b3e:	4413      	add	r3, r2
 8000b40:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000b44:	b298      	uxth	r0, r3
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b50:	4413      	add	r3, r2
 8000b52:	f813 3c23 	ldrb.w	r3, [r3, #-35]
 8000b56:	b299      	uxth	r1, r3
 8000b58:	2302      	movs	r3, #2
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f000 f9ca 	bl	8000ef4 <init_GP>

	unsigned long UART_BR = UART_BRR_CALC(BR);
 8000b60:	6838      	ldr	r0, [r7, #0]
 8000b62:	f000 f85d 	bl	8000c20 <UART_BRR_CALC>
 8000b66:	63f8      	str	r0, [r7, #60]	; 0x3c

	USARTx[uart-1]->BRR = UART_BR;
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b72:	4413      	add	r3, r2
 8000b74:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b7a:	609a      	str	r2, [r3, #8]

	//Enable interrup section--|enable RXNE		| enable TXE
	USARTx[uart-1]->CR1 	|= 	(1<<5) 			;
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b86:	4413      	add	r3, r2
 8000b88:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b8c:	68da      	ldr	r2, [r3, #12]
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b98:	440b      	add	r3, r1
 8000b9a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b9e:	f042 0220 	orr.w	r2, r2, #32
 8000ba2:	60da      	str	r2, [r3, #12]

	//Enable UART Transmit
	//------------------| Tx Enable | Rx Enable | Uart Enable
	USARTx[uart-1]->CR1 |= (1<<3) 	| (1<<2) 	| (1<<13);
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bae:	4413      	add	r3, r2
 8000bb0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000bb4:	68d9      	ldr	r1, [r3, #12]
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bc0:	4413      	add	r3, r2
 8000bc2:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000bc6:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 8000bca:	f043 030c 	orr.w	r3, r3, #12
 8000bce:	60d3      	str	r3, [r2, #12]


	IRQn_Type nvics[] = {USART1_IRQn,USART2_IRQn,USART3_IRQn};
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <UART_Init+0x1a8>)
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	8019      	strh	r1, [r3, #0]
 8000bdc:	3302      	adds	r3, #2
 8000bde:	0c12      	lsrs	r2, r2, #16
 8000be0:	701a      	strb	r2, [r3, #0]

	NVIC_EnableIRQ(nvics[uart-1]);//enable Uart interrupt
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bea:	4413      	add	r3, r2
 8000bec:	f913 3c38 	ldrsb.w	r3, [r3, #-56]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff23 	bl	8000a3c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bf6:	b662      	cpsie	i
}
 8000bf8:	bf00      	nop
	//	//57600   bps = BBR 0x08A
	//	//74880   bps = BBR 0x06A
	//	//115200  bps = BBR 0x045
	//	//230400  bps = BBR 0x023
 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3740      	adds	r7, #64	; 0x40
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000
 8000c08:	080043bc 	.word	0x080043bc
 8000c0c:	080043c8 	.word	0x080043c8
 8000c10:	080043d4 	.word	0x080043d4
 8000c14:	080043dc 	.word	0x080043dc
 8000c18:	080043e8 	.word	0x080043e8
 8000c1c:	080043ec 	.word	0x080043ec

08000c20 <UART_BRR_CALC>:

unsigned long UART_BRR_CALC(unsigned long BR ){
 8000c20:	b5b0      	push	{r4, r5, r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	unsigned long div = 8000000;
 8000c28:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <UART_BRR_CALC+0xf8>)
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned long dec;
	unsigned long final;

	double fraq = 8000000.00;
 8000c2c:	a338      	add	r3, pc, #224	; (adr r3, 8000d10 <UART_BRR_CALC+0xf0>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double fraq2 = 1.00;
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <UART_BRR_CALC+0xfc>)
 8000c3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	div /= (BR * 16);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
	fraq = 16*(fraq/(BR * 16) - div);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	011b      	lsls	r3, r3, #4
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fbbf 	bl	80003d4 <__aeabi_ui2d>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c5e:	f7ff fd5d 	bl	800071c <__aeabi_ddiv>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4614      	mov	r4, r2
 8000c68:	461d      	mov	r5, r3
 8000c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c6c:	f7ff fbb2 	bl	80003d4 <__aeabi_ui2d>
 8000c70:	4602      	mov	r2, r0
 8000c72:	460b      	mov	r3, r1
 8000c74:	4620      	mov	r0, r4
 8000c76:	4629      	mov	r1, r5
 8000c78:	f7ff fa6e 	bl	8000158 <__aeabi_dsub>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4610      	mov	r0, r2
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 0200 	mov.w	r2, #0
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <UART_BRR_CALC+0x100>)
 8000c8a:	f7ff fc1d 	bl	80004c8 <__aeabi_dmul>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	e9c7 2306 	strd	r2, r3, [r7, #24]
	dec = fraq;
 8000c96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c9a:	f7ff feaf 	bl	80009fc <__aeabi_d2uiz>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	623b      	str	r3, [r7, #32]
	fraq2 = 100*(fraq-dec);
 8000ca2:	6a38      	ldr	r0, [r7, #32]
 8000ca4:	f7ff fb96 	bl	80003d4 <__aeabi_ui2d>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cb0:	f7ff fa52 	bl	8000158 <__aeabi_dsub>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <UART_BRR_CALC+0x104>)
 8000cc2:	f7ff fc01 	bl	80004c8 <__aeabi_dmul>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(fraq2 >50){
 8000cce:	f04f 0200 	mov.w	r2, #0
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <UART_BRR_CALC+0x108>)
 8000cd4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cd8:	f7ff fe86 	bl	80009e8 <__aeabi_dcmpgt>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00a      	beq.n	8000cf8 <UART_BRR_CALC+0xd8>
		dec++;
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
		if(dec == 16){
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	2b10      	cmp	r3, #16
 8000cec:	d104      	bne.n	8000cf8 <UART_BRR_CALC+0xd8>
			dec=0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
			div++;
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	final = (div<<4);
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	60fb      	str	r3, [r7, #12]
	final += dec;
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	6a3b      	ldr	r3, [r7, #32]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
	return final;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3728      	adds	r7, #40	; 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d10:	00000000 	.word	0x00000000
 8000d14:	415e8480 	.word	0x415e8480
 8000d18:	007a1200 	.word	0x007a1200
 8000d1c:	3ff00000 	.word	0x3ff00000
 8000d20:	40300000 	.word	0x40300000
 8000d24:	40590000 	.word	0x40590000
 8000d28:	40490000 	.word	0x40490000

08000d2c <UART_Rx>:

char UART_Rx(unsigned short uart){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
	USART_TypeDef * USARTx[] = {USART1,USART2,USART3};
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <UART_Rx+0x50>)
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	while( !(USARTx[uart-1]->SR & (1<<5)));
 8000d42:	bf00      	nop
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	f107 0218 	add.w	r2, r7, #24
 8000d4e:	4413      	add	r3, r2
 8000d50:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0320 	and.w	r3, r3, #32
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f2      	beq.n	8000d44 <UART_Rx+0x18>

	return USARTx[uart-1]->DR ;
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	f107 0218 	add.w	r2, r7, #24
 8000d68:	4413      	add	r3, r2
 8000d6a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	b2db      	uxtb	r3, r3
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	371c      	adds	r7, #28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	080043bc 	.word	0x080043bc

08000d80 <UART_Tx>:

void UART_Tx(unsigned short uart,char c){
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	460a      	mov	r2, r1
 8000d8a:	80fb      	strh	r3, [r7, #6]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	717b      	strb	r3, [r7, #5]

	USART_TypeDef * USARTx[] = {USART1,USART2,USART3};
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <UART_Tx+0x58>)
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d98:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	USARTx[uart-1]->DR = c;
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	f107 0218 	add.w	r2, r7, #24
 8000da6:	4413      	add	r3, r2
 8000da8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000dac:	797a      	ldrb	r2, [r7, #5]
 8000dae:	605a      	str	r2, [r3, #4]

	while( !(USARTx[uart-1]->SR & (1<<6))){
 8000db0:	bf00      	nop
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	f107 0218 	add.w	r2, r7, #24
 8000dbc:	4413      	add	r3, r2
 8000dbe:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f2      	beq.n	8000db2 <UART_Tx+0x32>

	}
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	371c      	adds	r7, #28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	080043bc 	.word	0x080043bc

08000ddc <UART_Tx_Stream>:

void UART_Tx_Stream(unsigned short uart, char str[]){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	80fb      	strh	r3, [r7, #6]

	int i=0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 	while(str[i] != '\0'){
 8000dec:	e00b      	b.n	8000e06 <UART_Tx_Stream+0x2a>
		UART_Tx(uart, str[i++]);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	60fa      	str	r2, [r7, #12]
 8000df4:	461a      	mov	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffbd 	bl	8000d80 <UART_Tx>
 	while(str[i] != '\0'){
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1ed      	bne.n	8000dee <UART_Tx_Stream+0x12>
		//DelayMs(2);
	}

}
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <UART_ISR>:

void UART_ISR(unsigned short uart, unsigned short uart_mgr[],char * str){
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	81fb      	strh	r3, [r7, #14]
	//if bridge = 0 receive and save to the buffer
	//else then bridge send to the brige, the received from uart
	//__disable_irq();
	if(uart_mgr[2]==0){
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d136      	bne.n	8000ea2 <UART_ISR+0x86>
		str[uart_mgr[0]] = UART_Rx(uart);
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	189c      	adds	r4, r3, r2
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff73 	bl	8000d2c <UART_Rx>
 8000e46:	4603      	mov	r3, r0
 8000e48:	7023      	strb	r3, [r4, #0]
		if(uart_mgr[3] ){
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	3306      	adds	r3, #6
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d01a      	beq.n	8000e8a <UART_ISR+0x6e>
			//terminator strategy (receive untill the terminator found then send)
			if(str[uart_mgr[0]] == uart_mgr[4]){
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3308      	adds	r3, #8
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d107      	bne.n	8000e7c <UART_ISR+0x60>
				uart_mgr[0]=0;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	801a      	strh	r2, [r3, #0]
				uart_mgr[1]=1;
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3302      	adds	r3, #2
 8000e76:	2201      	movs	r2, #1
 8000e78:	801a      	strh	r2, [r3, #0]
		}
	}else{
		UART_Tx(uart_mgr[2], UART_Rx(uart));
	}
	//__enable_irq();
}
 8000e7a:	e01e      	b.n	8000eba <UART_ISR+0x9e>
				uart_mgr[0]++;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	801a      	strh	r2, [r3, #0]
}
 8000e88:	e017      	b.n	8000eba <UART_ISR+0x9e>
			uart_mgr[0]++;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	801a      	strh	r2, [r3, #0]
			uart_mgr[6] = uart_mgr[5];
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	330c      	adds	r3, #12
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	8952      	ldrh	r2, [r2, #10]
 8000e9e:	801a      	strh	r2, [r3, #0]
}
 8000ea0:	e00b      	b.n	8000eba <UART_ISR+0x9e>
		UART_Tx(uart_mgr[2], UART_Rx(uart));
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	881c      	ldrh	r4, [r3, #0]
 8000ea8:	89fb      	ldrh	r3, [r7, #14]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff3e 	bl	8000d2c <UART_Rx>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f7ff ff63 	bl	8000d80 <UART_Tx>
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd90      	pop	{r4, r7, pc}
	...

08000ec4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4a06      	ldr	r2, [pc, #24]	; (8000eec <vApplicationGetIdleTaskMemory+0x28>)
 8000ed4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	2000009c 	.word	0x2000009c
 8000ef0:	20000150 	.word	0x20000150

08000ef4 <init_GP>:
 */

#include "gp_driver.h"

void init_GP(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8000ef4:	b490      	push	{r4, r7}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4623      	mov	r3, r4
 8000f04:	80fb      	strh	r3, [r7, #6]
 8000f06:	4603      	mov	r3, r0
 8000f08:	80bb      	strh	r3, [r7, #4]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	807b      	strh	r3, [r7, #2]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	803b      	strh	r3, [r7, #0]
	// volatile unsigned long * CR;
	unsigned short tPIN = pin;
 8000f12:	88bb      	ldrh	r3, [r7, #4]
 8000f14:	83fb      	strh	r3, [r7, #30]
	unsigned short offset = 0x00;
 8000f16:	2300      	movs	r3, #0
 8000f18:	83bb      	strh	r3, [r7, #28]

	if(pin > 7)
 8000f1a:	88bb      	ldrh	r3, [r7, #4]
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	d904      	bls.n	8000f2a <init_GP+0x36>
	{
		tPIN -= 8;
 8000f20:	8bfb      	ldrh	r3, [r7, #30]
 8000f22:	3b08      	subs	r3, #8
 8000f24:	83fb      	strh	r3, [r7, #30]
		offset = 0x01;
 8000f26:	2301      	movs	r3, #1
 8000f28:	83bb      	strh	r3, [r7, #28]
	}

	volatile unsigned long *CRL_or_CRH[] = {&GPIO_A+offset,&GPIO_B+offset,&GPIO_C+offset};
 8000f2a:	8bbb      	ldrh	r3, [r7, #28]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f32:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	8bbb      	ldrh	r3, [r7, #28]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f40:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	8bbb      	ldrh	r3, [r7, #28]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f4e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000f52:	61bb      	str	r3, [r7, #24]
	char RCCValues[] = {4,8,0x10};
 8000f54:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <init_GP+0x108>)
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	8019      	strh	r1, [r3, #0]
 8000f60:	3302      	adds	r3, #2
 8000f62:	0c12      	lsrs	r2, r2, #16
 8000f64:	701a      	strb	r2, [r3, #0]

	RCC_APB2ENR |= RCCValues[port-1];
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <init_GP+0x10c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	3a01      	subs	r2, #1
 8000f6e:	f107 0120 	add.w	r1, r7, #32
 8000f72:	440a      	add	r2, r1
 8000f74:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <init_GP+0x10c>)
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	6013      	str	r3, [r2, #0]

	*CRL_or_CRH[port-1] &= ~(0xf<<(tPIN)*4); ///Reset the below pins
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	f107 0220 	add.w	r2, r7, #32
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	8bfb      	ldrh	r3, [r7, #30]
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	210f      	movs	r1, #15
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	f107 0020 	add.w	r0, r7, #32
 8000faa:	4403      	add	r3, r0
 8000fac:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
	*CRL_or_CRH[port-1] |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	f107 0220 	add.w	r2, r7, #32
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	8879      	ldrh	r1, [r7, #2]
 8000fc8:	8bfb      	ldrh	r3, [r7, #30]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4099      	lsls	r1, r3
 8000fce:	8838      	ldrh	r0, [r7, #0]
 8000fd0:	8bfb      	ldrh	r3, [r7, #30]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	fa00 f303 	lsl.w	r3, r0, r3
 8000fda:	430b      	orrs	r3, r1
 8000fdc:	4619      	mov	r1, r3
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	f107 0020 	add.w	r0, r7, #32
 8000fe8:	4403      	add	r3, r0
 8000fea:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc90      	pop	{r4, r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	080043f0 	.word	0x080043f0
 8001000:	40021018 	.word	0x40021018

08001004 <W_GP>:
	return ((*portsarr[port-1] & (1<<pin))>>pin);//convert pin state to true or false

}

void W_GP(unsigned short port, unsigned short pin, volatile unsigned short state)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
 800100e:	460b      	mov	r3, r1
 8001010:	80bb      	strh	r3, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	807b      	strh	r3, [r7, #2]
	volatile unsigned long *portsarr[] = {&GPIO_A+0x03,&GPIO_B+0x03,&GPIO_C+0x03};
 8001016:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <W_GP+0xa0>)
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	ca07      	ldmia	r2, {r0, r1, r2}
 800101e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  __ASM volatile ("cpsid i" : : : "memory");
 8001022:	b672      	cpsid	i
}
 8001024:	bf00      	nop
	__disable_irq();
	state ? (*portsarr[port-1] |= (state<<pin)) : (*portsarr[port-1] &= ~(1<<pin));
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	b29b      	uxth	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d019      	beq.n	8001062 <W_GP+0x5e>
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	b29b      	uxth	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	fa02 f103 	lsl.w	r1, r2, r3
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	3b01      	subs	r3, #1
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	f107 0218 	add.w	r2, r7, #24
 8001044:	4413      	add	r3, r2
 8001046:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	3b01      	subs	r3, #1
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	f107 0018 	add.w	r0, r7, #24
 8001056:	4403      	add	r3, r0
 8001058:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800105c:	430a      	orrs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e018      	b.n	8001094 <W_GP+0x90>
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	3b01      	subs	r3, #1
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	f107 0218 	add.w	r2, r7, #24
 800106c:	4413      	add	r3, r2
 800106e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	2101      	movs	r1, #1
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	3b01      	subs	r3, #1
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	f107 0018 	add.w	r0, r7, #24
 800108a:	4403      	add	r3, r0
 800108c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8001090:	400a      	ands	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001094:	b662      	cpsie	i
}
 8001096:	bf00      	nop
	__enable_irq();
}
 8001098:	bf00      	nop
 800109a:	371c      	adds	r7, #28
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	08004400 	.word	0x08004400

080010a8 <str_empty>:
 * help_func.c
 *
 *  Created on: Feb 10, 2021
 *      Author: Hazem
 */
void str_empty(char str[]){
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	int i=0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
	while(str[i] != '\0'){
 80010b4:	e007      	b.n	80010c6 <str_empty+0x1e>
		str[i] = '\0';
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
		i++;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
	while(str[i] != '\0'){
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f1      	bne.n	80010b6 <str_empty+0xe>
	}
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr

080010de <len_str>:

int len_str(char str[]){
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	int len = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
	while(str[len++] !='\0');
 80010ea:	bf00      	nop
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60fa      	str	r2, [r7, #12]
 80010f2:	461a      	mov	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f6      	bne.n	80010ec <len_str+0xe>
	return len-1;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3b01      	subs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <find_str>:

int find_str(char str1[],char str2[]){
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	int match=0;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]

	int strlen = len_str(str1);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffdf 	bl	80010de <len_str>
 8001120:	60f8      	str	r0, [r7, #12]
	int test=0;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]

	for(int i=0;((str2[i+strlen-1] != '\0') | (str2[i+strlen] != '\0')) & (match==0);i++){
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e024      	b.n	8001176 <find_str+0x6a>
		for(int j=0;j<=strlen;j++){
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	e018      	b.n	8001164 <find_str+0x58>
			if(str1[j] == str2[i+j]){
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	6979      	ldr	r1, [r7, #20]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	440b      	add	r3, r1
 8001140:	4619      	mov	r1, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	440b      	add	r3, r1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d108      	bne.n	800115e <find_str+0x52>
				test++;
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	3301      	adds	r3, #1
 8001150:	61bb      	str	r3, [r7, #24]
				if(test== strlen){
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	429a      	cmp	r2, r3
 8001158:	d101      	bne.n	800115e <find_str+0x52>
					match=1;
 800115a:	2301      	movs	r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
		for(int j=0;j<=strlen;j++){
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3301      	adds	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	dde2      	ble.n	8001132 <find_str+0x26>
				}
			}
		}
		test=0;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
	for(int i=0;((str2[i+strlen-1] != '\0') | (str2[i+strlen] != '\0')) & (match==0);i++){
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3301      	adds	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	3b01      	subs	r3, #1
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	4413      	add	r3, r2
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	6979      	ldr	r1, [r7, #20]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	440b      	add	r3, r1
 800118a:	4619      	mov	r1, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	440b      	add	r3, r1
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	4313      	orrs	r3, r2
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4013      	ands	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1bb      	bne.n	800112c <find_str+0x20>
	}

	return match;
 80011b4:	69fb      	ldr	r3, [r7, #28]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <concatenate>:
		res = 1;
	}
	return res;
}

void concatenate(char str1[], char str2[]){
 80011be:	b480      	push	{r7}
 80011c0:	b085      	sub	sp, #20
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	int i=0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
	int j=0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
	while(str1[i++]!='\0');
 80011d0:	bf00      	nop
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	60fa      	str	r2, [r7, #12]
 80011d8:	461a      	mov	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f6      	bne.n	80011d2 <concatenate+0x14>

	i--;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
	while(str2[j]!='\0'){
 80011ea:	e00d      	b.n	8001208 <concatenate+0x4a>
		str1[i+j] = str2[j];
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	441a      	add	r2, r3
 80011f2:	68f9      	ldr	r1, [r7, #12]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	440b      	add	r3, r1
 80011f8:	4619      	mov	r1, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	440b      	add	r3, r1
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	701a      	strb	r2, [r3, #0]
		j++;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3301      	adds	r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
	while(str2[j]!='\0'){
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1eb      	bne.n	80011ec <concatenate+0x2e>
	}
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <__NVIC_EnableIRQ>:
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db0b      	blt.n	800124a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 021f 	and.w	r2, r3, #31
 8001238:	4906      	ldr	r1, [pc, #24]	; (8001254 <__NVIC_EnableIRQ+0x34>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	2001      	movs	r0, #1
 8001242:	fa00 f202 	lsl.w	r2, r0, r2
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100

08001258 <main>:

void Task1_App(void const * argument);
void Task2_App(void const * argument);

int main(void)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b092      	sub	sp, #72	; 0x48
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  init_GP(PA,0,IN,I_PP);
 800125e:	2302      	movs	r3, #2
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff fe45 	bl	8000ef4 <init_GP>
  __ASM volatile ("cpsid i" : : : "memory");
 800126a:	b672      	cpsid	i
}
 800126c:	bf00      	nop
  //ARM assignes it by default to 0 and FreeRtos checks that there is no maskable interrupt have priority higher than Systick which
  //is configurable with FreeRTOSConfig.h file but because we have no time i disabled this check in free rtos :D

  __disable_irq();
  // map the pin to EXTI peripheral
  AFIO->EXTICR[0] = 0x00; // map port A to EXTI periheral
 800126e:	4b39      	ldr	r3, [pc, #228]	; (8001354 <main+0xfc>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  //enable the interrupt activity
  EXTI->IMR |=1; //not maskable interrupt enabled
 8001274:	4b38      	ldr	r3, [pc, #224]	; (8001358 <main+0x100>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a37      	ldr	r2, [pc, #220]	; (8001358 <main+0x100>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]
  EXTI->RTSR |= 1;//interrupt occurs on rising trigger
 8001280:	4b35      	ldr	r3, [pc, #212]	; (8001358 <main+0x100>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	4a34      	ldr	r2, [pc, #208]	; (8001358 <main+0x100>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6093      	str	r3, [r2, #8]
  NVIC_EnableIRQ(EXTI0_IRQn);//enable EXTI0 for NVIC peripheral which connects interrupt signal from exti peripheral
 800128c:	2006      	movs	r0, #6
 800128e:	f7ff ffc7 	bl	8001220 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001292:	b662      	cpsie	i
}
 8001294:	bf00      	nop
  __enable_irq();//enable processor main interrupt flag

  init_GP(PC,14,OUT50, O_GP_PP);
 8001296:	2300      	movs	r3, #0
 8001298:	2203      	movs	r2, #3
 800129a:	210e      	movs	r1, #14
 800129c:	2003      	movs	r0, #3
 800129e:	f7ff fe29 	bl	8000ef4 <init_GP>
  init_GP(PC,13,OUT50, O_GP_PP);
 80012a2:	2300      	movs	r3, #0
 80012a4:	2203      	movs	r2, #3
 80012a6:	210d      	movs	r1, #13
 80012a8:	2003      	movs	r0, #3
 80012aa:	f7ff fe23 	bl	8000ef4 <init_GP>

  UART_Init(Uart1,9600);
 80012ae:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fbde 	bl	8000a74 <UART_Init>
  UART_Tx_Stream(Uart1, "H");//flushing char
 80012b8:	4928      	ldr	r1, [pc, #160]	; (800135c <main+0x104>)
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fd8e 	bl	8000ddc <UART_Tx_Stream>
  UART_Tx_Stream(Uart1, "Hellow from UART 1\n");
 80012c0:	4927      	ldr	r1, [pc, #156]	; (8001360 <main+0x108>)
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7ff fd8a 	bl	8000ddc <UART_Tx_Stream>

  /* Create the semaphores(s) */
  /* definition and creation of Binary_Sem */
  osSemaphoreStaticDef(Binary_Sem, &Binary_SemControlBlock);
 80012c8:	2300      	movs	r3, #0
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <main+0x10c>)
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
  Binary_SemHandle = osSemaphoreCreate(osSemaphore(Binary_Sem), 1);
 80012d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d4:	2101      	movs	r1, #1
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fc07 	bl	8001aea <osSemaphoreCreate>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a22      	ldr	r2, [pc, #136]	; (8001368 <main+0x110>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_Binary_SEM */
  osSemaphoreStaticDef(UART_Binary_SEM, &UART_Binary_SEMControlBlock);
 80012e2:	2300      	movs	r3, #0
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <main+0x114>)
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  UART_Binary_SEMHandle = osSemaphoreCreate(osSemaphore(UART_Binary_SEM), 1);
 80012ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ee:	2101      	movs	r1, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fbfa 	bl	8001aea <osSemaphoreCreate>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <main+0x118>)
 80012fa:	6013      	str	r3, [r2, #0]

  /* add semaphores initial status, ... */
  osSemaphoreRelease(UART_Binary_SEMHandle);
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <main+0x118>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fc7f 	bl	8001c04 <osSemaphoreRelease>

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_App, osPriorityNormal, 0, 128);
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <main+0x11c>)
 8001308:	f107 041c 	add.w	r4, r7, #28
 800130c:	461d      	mov	r5, r3
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fb82 	bl	8001a2a <osThreadCreate>
 8001326:	4603      	mov	r3, r0
 8001328:	4a13      	ldr	r2, [pc, #76]	; (8001378 <main+0x120>)
 800132a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_App, osPriorityAboveNormal, 0, 128);
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <main+0x124>)
 800132e:	463c      	mov	r4, r7
 8001330:	461d      	mov	r5, r3
 8001332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800133e:	463b      	mov	r3, r7
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fb71 	bl	8001a2a <osThreadCreate>
 8001348:	4603      	mov	r3, r0
 800134a:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <main+0x128>)
 800134c:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 800134e:	f000 fb65 	bl	8001a1c <osKernelStart>

  /* Infinite loop */
  while (1)
 8001352:	e7fe      	b.n	8001352 <main+0xfa>
 8001354:	40010000 	.word	0x40010000
 8001358:	40010400 	.word	0x40010400
 800135c:	0800441c 	.word	0x0800441c
 8001360:	08004420 	.word	0x08004420
 8001364:	200011e4 	.word	0x200011e4
 8001368:	20001234 	.word	0x20001234
 800136c:	200010a0 	.word	0x200010a0
 8001370:	20001238 	.word	0x20001238
 8001374:	08004434 	.word	0x08004434
 8001378:	2000122c 	.word	0x2000122c
 800137c:	08004450 	.word	0x08004450
 8001380:	20001230 	.word	0x20001230

08001384 <USART1_IRQHandler>:

  }
}

/* START INTERRUPT HANDLERS */
void USART1_IRQHandler(){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	UART_ISR(Uart1, Uart_1_mgr, Uart_1_msg);//receive UART Data Asynchronously with interrupt
 8001388:	4a03      	ldr	r2, [pc, #12]	; (8001398 <USART1_IRQHandler+0x14>)
 800138a:	4904      	ldr	r1, [pc, #16]	; (800139c <USART1_IRQHandler+0x18>)
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff fd45 	bl	8000e1c <UART_ISR>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200010e8 	.word	0x200010e8
 800139c:	20000000 	.word	0x20000000

080013a0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	EXTI->PR |=1;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <EXTI0_IRQHandler+0x28>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <EXTI0_IRQHandler+0x28>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6153      	str	r3, [r2, #20]
	osSemaphoreRelease(UART_Binary_SEMHandle);//release uart to enable higher priority task to run
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <EXTI0_IRQHandler+0x2c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fc25 	bl	8001c04 <osSemaphoreRelease>
	osSemaphoreRelease(Binary_SemHandle);
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <EXTI0_IRQHandler+0x30>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fc20 	bl	8001c04 <osSemaphoreRelease>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40010400 	.word	0x40010400
 80013cc:	20001238 	.word	0x20001238
 80013d0:	20001234 	.word	0x20001234

080013d4 <Task1_App>:
  * @brief  Function implementing the Task1 thread.
  * @param  argument: Not used
  * @retval None
  */
void Task1_App(void const * argument)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	for(;;)
	{
		/* Check modem communication */
		osSemaphoreWait(UART_Binary_SEMHandle, osWaitForever);
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <Task1_App+0x70>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fbbf 	bl	8001b68 <osSemaphoreWait>
		Receive_from_Rock_Modem(Uart_1_mgr,Uart_1_msg);
 80013ea:	4917      	ldr	r1, [pc, #92]	; (8001448 <Task1_App+0x74>)
 80013ec:	4817      	ldr	r0, [pc, #92]	; (800144c <Task1_App+0x78>)
 80013ee:	f000 f86f 	bl	80014d0 <Receive_from_Rock_Modem>
		osSemaphoreRelease(UART_Binary_SEMHandle);
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <Task1_App+0x70>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fc04 	bl	8001c04 <osSemaphoreRelease>
		/* Receive response in UART_1_msg*/

		if (strstr(Uart_1_msg, "TURNOFF") != NULL) {
 80013fc:	4914      	ldr	r1, [pc, #80]	; (8001450 <Task1_App+0x7c>)
 80013fe:	4812      	ldr	r0, [pc, #72]	; (8001448 <Task1_App+0x74>)
 8001400:	f002 ff60 	bl	80042c4 <strstr>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <Task1_App+0x42>
			W_GP(PC,14,LOW);
 800140a:	2200      	movs	r2, #0
 800140c:	210e      	movs	r1, #14
 800140e:	2003      	movs	r0, #3
 8001410:	f7ff fdf8 	bl	8001004 <W_GP>
 8001414:	e00b      	b.n	800142e <Task1_App+0x5a>
		}
		else if (strstr(Uart_1_msg, "TURNON") != NULL) {
 8001416:	490f      	ldr	r1, [pc, #60]	; (8001454 <Task1_App+0x80>)
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <Task1_App+0x74>)
 800141a:	f002 ff53 	bl	80042c4 <strstr>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <Task1_App+0x5a>
			W_GP(PC,14,HIGH);
 8001424:	2201      	movs	r2, #1
 8001426:	210e      	movs	r1, #14
 8001428:	2003      	movs	r0, #3
 800142a:	f7ff fdeb 	bl	8001004 <W_GP>
		}
		//clear received buffer
		str_empty(Uart_1_msg);
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <Task1_App+0x74>)
 8001430:	f7ff fe3a 	bl	80010a8 <str_empty>
		Uart_1_mgr[0] = 0;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <Task1_App+0x78>)
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]

		osDelay(500);
 800143a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143e:	f000 fb40 	bl	8001ac2 <osDelay>
		osSemaphoreWait(UART_Binary_SEMHandle, osWaitForever);
 8001442:	e7cb      	b.n	80013dc <Task1_App+0x8>
 8001444:	20001238 	.word	0x20001238
 8001448:	200010e8 	.word	0x200010e8
 800144c:	20000000 	.word	0x20000000
 8001450:	0800446c 	.word	0x0800446c
 8001454:	08004474 	.word	0x08004474

08001458 <Task2_App>:
* @brief Function implementing the Task2 thread.
* @param argument: Not used
* @retval None
*/
void Task2_App(void const * argument)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	for(;;)
	{
		osSemaphoreWait(Binary_SemHandle, osWaitForever);
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <Task2_App+0x44>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fb7d 	bl	8001b68 <osSemaphoreWait>

		osSemaphoreWait(UART_Binary_SEMHandle, osWaitForever);
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <Task2_App+0x48>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fb76 	bl	8001b68 <osSemaphoreWait>
		Send_To_Rock_Modem(Uart_1_mgr,Uart_1_msg,"ALERT!");
 800147c:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <Task2_App+0x4c>)
 800147e:	490a      	ldr	r1, [pc, #40]	; (80014a8 <Task2_App+0x50>)
 8001480:	480a      	ldr	r0, [pc, #40]	; (80014ac <Task2_App+0x54>)
 8001482:	f000 f879 	bl	8001578 <Send_To_Rock_Modem>
		osSemaphoreRelease(UART_Binary_SEMHandle);
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <Task2_App+0x48>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fbba 	bl	8001c04 <osSemaphoreRelease>
		osDelay(500);
 8001490:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001494:	f000 fb15 	bl	8001ac2 <osDelay>
		osSemaphoreWait(Binary_SemHandle, osWaitForever);
 8001498:	e7e2      	b.n	8001460 <Task2_App+0x8>
 800149a:	bf00      	nop
 800149c:	20001234 	.word	0x20001234
 80014a0:	20001238 	.word	0x20001238
 80014a4:	0800447c 	.word	0x0800447c
 80014a8:	200010e8 	.word	0x200010e8
 80014ac:	20000000 	.word	0x20000000

080014b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d101      	bne.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014c2:	f000 f933 	bl	800172c <HAL_IncTick>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <Receive_from_Rock_Modem>:
 *      Author: Hazem
 */

#include "rockblock.h"

void Receive_from_Rock_Modem(unsigned short uart_mgr[], char Uart_1_msg[]){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	//	char OK[]="OK\r";
	unsigned long int timeoutVal=0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
	//clear received buffer
	str_empty(Uart_1_msg);
 80014de:	6838      	ldr	r0, [r7, #0]
 80014e0:	f7ff fde2 	bl	80010a8 <str_empty>
	uart_mgr[0] = 0;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	801a      	strh	r2, [r3, #0]

	/* Receive response */
	UART_Tx_Stream(Uart1,"AT\r");
 80014ea:	491e      	ldr	r1, [pc, #120]	; (8001564 <Receive_from_Rock_Modem+0x94>)
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff fc75 	bl	8000ddc <UART_Tx_Stream>
	while( !find_str("OK\r",Uart_1_msg) || timeoutVal==1000000 )timeoutVal++;//wait for a certain period of time then move on
 80014f2:	e002      	b.n	80014fa <Receive_from_Rock_Modem+0x2a>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	6839      	ldr	r1, [r7, #0]
 80014fc:	481a      	ldr	r0, [pc, #104]	; (8001568 <Receive_from_Rock_Modem+0x98>)
 80014fe:	f7ff fe05 	bl	800110c <find_str>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f5      	beq.n	80014f4 <Receive_from_Rock_Modem+0x24>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <Receive_from_Rock_Modem+0x9c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d0f1      	beq.n	80014f4 <Receive_from_Rock_Modem+0x24>
	//clear received buffer
	str_empty(Uart_1_msg);
 8001510:	6838      	ldr	r0, [r7, #0]
 8001512:	f7ff fdc9 	bl	80010a8 <str_empty>
	uart_mgr[0] = 0;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]

	/* Turn off Flow Control */
	timeoutVal=0;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
	UART_Tx_Stream(Uart1,"AT&K0\r");
 8001520:	4913      	ldr	r1, [pc, #76]	; (8001570 <Receive_from_Rock_Modem+0xa0>)
 8001522:	2001      	movs	r0, #1
 8001524:	f7ff fc5a 	bl	8000ddc <UART_Tx_Stream>
	while( !find_str("OK\r",Uart_1_msg) || timeoutVal==1000000)timeoutVal++;//wait for a certain period of time then move on
 8001528:	e002      	b.n	8001530 <Receive_from_Rock_Modem+0x60>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	6839      	ldr	r1, [r7, #0]
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <Receive_from_Rock_Modem+0x98>)
 8001534:	f7ff fdea 	bl	800110c <find_str>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f5      	beq.n	800152a <Receive_from_Rock_Modem+0x5a>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <Receive_from_Rock_Modem+0x9c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d0f1      	beq.n	800152a <Receive_from_Rock_Modem+0x5a>
	//clear received buffer
	str_empty(Uart_1_msg);
 8001546:	6838      	ldr	r0, [r7, #0]
 8001548:	f7ff fdae 	bl	80010a8 <str_empty>
	uart_mgr[0] = 0;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]

	/* Initiate an Extended SBD Session */
	UART_Tx_Stream(Uart1,"AT+SBDIX\r");
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <Receive_from_Rock_Modem+0xa4>)
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fc41 	bl	8000ddc <UART_Tx_Stream>

	//we can check message success before abort in this section :D
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	08004484 	.word	0x08004484
 8001568:	08004488 	.word	0x08004488
 800156c:	000f4240 	.word	0x000f4240
 8001570:	0800448c 	.word	0x0800448c
 8001574:	08004494 	.word	0x08004494

08001578 <Send_To_Rock_Modem>:

void Send_To_Rock_Modem(unsigned short uart_mgr[], char Uart_1_msg[],char ROCK_BLOCK_MSG[]){
 8001578:	b580      	push	{r7, lr}
 800157a:	b092      	sub	sp, #72	; 0x48
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
	/* Issue AT command */
	unsigned long int timeoutVal=0;
 8001584:	2300      	movs	r3, #0
 8001586:	647b      	str	r3, [r7, #68]	; 0x44
	//clear received buffer
	uart_mgr[0] = 0;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	801a      	strh	r2, [r3, #0]

	/* Receive response */
	str_empty(Uart_1_msg);
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f7ff fd8a 	bl	80010a8 <str_empty>
	uart_mgr[0] = 0;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	801a      	strh	r2, [r3, #0]
	UART_Tx_Stream(Uart1,"AT\r");
 800159a:	4937      	ldr	r1, [pc, #220]	; (8001678 <Send_To_Rock_Modem+0x100>)
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff fc1d 	bl	8000ddc <UART_Tx_Stream>
	find_str("OK\r",Uart_1_msg);
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	4835      	ldr	r0, [pc, #212]	; (800167c <Send_To_Rock_Modem+0x104>)
 80015a6:	f7ff fdb1 	bl	800110c <find_str>
	while( !find_str("OK\r",Uart_1_msg) || timeoutVal==1000000 )timeoutVal++;//wait for a certain period of time then move on
 80015aa:	e002      	b.n	80015b2 <Send_To_Rock_Modem+0x3a>
 80015ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ae:	3301      	adds	r3, #1
 80015b0:	647b      	str	r3, [r7, #68]	; 0x44
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	4831      	ldr	r0, [pc, #196]	; (800167c <Send_To_Rock_Modem+0x104>)
 80015b6:	f7ff fda9 	bl	800110c <find_str>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f5      	beq.n	80015ac <Send_To_Rock_Modem+0x34>
 80015c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c2:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <Send_To_Rock_Modem+0x108>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d0f1      	beq.n	80015ac <Send_To_Rock_Modem+0x34>

	/* Turn off Flow Control */
	timeoutVal=0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	647b      	str	r3, [r7, #68]	; 0x44
	str_empty(Uart_1_msg);
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f7ff fd6b 	bl	80010a8 <str_empty>
	uart_mgr[0] = 0;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]
	UART_Tx_Stream(Uart1,"AT&K0\r");
 80015d8:	492a      	ldr	r1, [pc, #168]	; (8001684 <Send_To_Rock_Modem+0x10c>)
 80015da:	2001      	movs	r0, #1
 80015dc:	f7ff fbfe 	bl	8000ddc <UART_Tx_Stream>
	while( !find_str("OK\r",Uart_1_msg) || timeoutVal==1000000)timeoutVal++;//wait for a certain period of time then move on
 80015e0:	e002      	b.n	80015e8 <Send_To_Rock_Modem+0x70>
 80015e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015e4:	3301      	adds	r3, #1
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	4824      	ldr	r0, [pc, #144]	; (800167c <Send_To_Rock_Modem+0x104>)
 80015ec:	f7ff fd8e 	bl	800110c <find_str>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f5      	beq.n	80015e2 <Send_To_Rock_Modem+0x6a>
 80015f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015f8:	4a21      	ldr	r2, [pc, #132]	; (8001680 <Send_To_Rock_Modem+0x108>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d0f1      	beq.n	80015e2 <Send_To_Rock_Modem+0x6a>

	/* Insert ASCII message into MO buffer */
	//AT+SBDWT=Hello World\r
	timeoutVal=0;
 80015fe:	2300      	movs	r3, #0
 8001600:	647b      	str	r3, [r7, #68]	; 0x44
	char TR_msg[50];

	concatenate(TR_msg, "AT+SBDWT=");
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4920      	ldr	r1, [pc, #128]	; (8001688 <Send_To_Rock_Modem+0x110>)
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fdd8 	bl	80011be <concatenate>
	concatenate(TR_msg, ROCK_BLOCK_MSG);
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fdd2 	bl	80011be <concatenate>
	concatenate(TR_msg, "\r");
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	491b      	ldr	r1, [pc, #108]	; (800168c <Send_To_Rock_Modem+0x114>)
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fdcc 	bl	80011be <concatenate>

	//clear received buffer
	str_empty(Uart_1_msg);
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f7ff fd3e 	bl	80010a8 <str_empty>
	uart_mgr[0] = 0;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	801a      	strh	r2, [r3, #0]
	UART_Tx_Stream(Uart1,TR_msg);
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4619      	mov	r1, r3
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff fbcf 	bl	8000ddc <UART_Tx_Stream>
	while( !find_str("OK\r",Uart_1_msg) || timeoutVal==1000000)timeoutVal++;//wait for a certain period of time then move on
 800163e:	e002      	b.n	8001646 <Send_To_Rock_Modem+0xce>
 8001640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001642:	3301      	adds	r3, #1
 8001644:	647b      	str	r3, [r7, #68]	; 0x44
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <Send_To_Rock_Modem+0x104>)
 800164a:	f7ff fd5f 	bl	800110c <find_str>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f5      	beq.n	8001640 <Send_To_Rock_Modem+0xc8>
 8001654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <Send_To_Rock_Modem+0x108>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d0f1      	beq.n	8001640 <Send_To_Rock_Modem+0xc8>

	//clear received buffer
	str_empty(Uart_1_msg);
 800165c:	68b8      	ldr	r0, [r7, #8]
 800165e:	f7ff fd23 	bl	80010a8 <str_empty>
	uart_mgr[0] = 0;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	801a      	strh	r2, [r3, #0]
	/* Initiate an Extended SBD Session */
	UART_Tx_Stream(Uart1,"AT+SBDIX\r");
 8001668:	4909      	ldr	r1, [pc, #36]	; (8001690 <Send_To_Rock_Modem+0x118>)
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff fbb6 	bl	8000ddc <UART_Tx_Stream>
}
 8001670:	bf00      	nop
 8001672:	3748      	adds	r7, #72	; 0x48
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	08004484 	.word	0x08004484
 800167c:	08004488 	.word	0x08004488
 8001680:	000f4240 	.word	0x000f4240
 8001684:	0800448c 	.word	0x0800448c
 8001688:	080044a0 	.word	0x080044a0
 800168c:	080044ac 	.word	0x080044ac
 8001690:	08004494 	.word	0x08004494

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
	...

080016c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <TIM2_IRQHandler+0x10>)
 80016c6:	f000 f843 	bl	8001750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000123c 	.word	0x2000123c

080016d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e2:	490d      	ldr	r1, [pc, #52]	; (8001718 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f8:	4c0a      	ldr	r4, [pc, #40]	; (8001724 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001706:	f7ff ffe5 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170a:	f002 fd35 	bl	8004178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800170e:	f7ff fda3 	bl	8001258 <main>
  bx lr
 8001712:	4770      	bx	lr
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800171c:	08004520 	.word	0x08004520
  ldr r2, =_sbss
 8001720:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001724:	20001294 	.word	0x20001294

08001728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC1_2_IRQHandler>
	...

0800172c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x1c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_IncTick+0x20>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <HAL_IncTick+0x20>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000014 	.word	0x20000014
 800174c:	20001284 	.word	0x20001284

08001750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b02      	cmp	r3, #2
 8001764:	d122      	bne.n	80017ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b02      	cmp	r3, #2
 8001772:	d11b      	bne.n	80017ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f06f 0202 	mvn.w	r2, #2
 800177c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f8ed 	bl	8001972 <HAL_TIM_IC_CaptureCallback>
 8001798:	e005      	b.n	80017a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f8e0 	bl	8001960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f8ef 	bl	8001984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d122      	bne.n	8001800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d11b      	bne.n	8001800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f06f 0204 	mvn.w	r2, #4
 80017d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2202      	movs	r2, #2
 80017d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f8c3 	bl	8001972 <HAL_TIM_IC_CaptureCallback>
 80017ec:	e005      	b.n	80017fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f8b6 	bl	8001960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f8c5 	bl	8001984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b08      	cmp	r3, #8
 800180c:	d122      	bne.n	8001854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b08      	cmp	r3, #8
 800181a:	d11b      	bne.n	8001854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f06f 0208 	mvn.w	r2, #8
 8001824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2204      	movs	r2, #4
 800182a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f899 	bl	8001972 <HAL_TIM_IC_CaptureCallback>
 8001840:	e005      	b.n	800184e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f88c 	bl	8001960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f89b 	bl	8001984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b10      	cmp	r3, #16
 8001860:	d122      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b10      	cmp	r3, #16
 800186e:	d11b      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 0210 	mvn.w	r2, #16
 8001878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2208      	movs	r2, #8
 800187e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f86f 	bl	8001972 <HAL_TIM_IC_CaptureCallback>
 8001894:	e005      	b.n	80018a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f862 	bl	8001960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f871 	bl	8001984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d10e      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d107      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0201 	mvn.w	r2, #1
 80018cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fdee 	bl	80014b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	2b80      	cmp	r3, #128	; 0x80
 80018e0:	d10e      	bne.n	8001900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b80      	cmp	r3, #128	; 0x80
 80018ee:	d107      	bne.n	8001900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f85d 	bl	80019ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190a:	2b40      	cmp	r3, #64	; 0x40
 800190c:	d10e      	bne.n	800192c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001918:	2b40      	cmp	r3, #64	; 0x40
 800191a:	d107      	bne.n	800192c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f835 	bl	8001996 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	2b20      	cmp	r3, #32
 8001938:	d10e      	bne.n	8001958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b20      	cmp	r3, #32
 8001946:	d107      	bne.n	8001958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0220 	mvn.w	r2, #32
 8001950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f828 	bl	80019a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019de:	2b84      	cmp	r3, #132	; 0x84
 80019e0:	d005      	beq.n	80019ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	3303      	adds	r3, #3
 80019ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a00:	f3ef 8305 	mrs	r3, IPSR
 8001a04:	607b      	str	r3, [r7, #4]
  return(result);
 8001a06:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf14      	ite	ne
 8001a0c:	2301      	movne	r3, #1
 8001a0e:	2300      	moveq	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001a20:	f001 f990 	bl	8002d44 <vTaskStartScheduler>
  
  return osOK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2c:	b089      	sub	sp, #36	; 0x24
 8001a2e:	af04      	add	r7, sp, #16
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <osThreadCreate+0x54>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01c      	beq.n	8001a7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685c      	ldr	r4, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681d      	ldr	r5, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691e      	ldr	r6, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ffb8 	bl	80019cc <makeFreeRtosPriority>
 8001a5c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a66:	9202      	str	r2, [sp, #8]
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	9100      	str	r1, [sp, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4632      	mov	r2, r6
 8001a70:	4629      	mov	r1, r5
 8001a72:	4620      	mov	r0, r4
 8001a74:	f000 ff91 	bl	800299a <xTaskCreateStatic>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e01c      	b.n	8001ab8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685c      	ldr	r4, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a8a:	b29e      	uxth	r6, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff9a 	bl	80019cc <makeFreeRtosPriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	9200      	str	r2, [sp, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	4632      	mov	r2, r6
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f000 ffd2 	bl	8002a52 <xTaskCreate>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d001      	beq.n	8001ab8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e000      	b.n	8001aba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ac2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <osDelay+0x16>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	e000      	b.n	8001ada <osDelay+0x18>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 f8fe 	bl	8002cdc <vTaskDelay>
  
  return osOK;
 8001ae0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af02      	add	r7, sp, #8
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d016      	beq.n	8001b2a <osSemaphoreCreate+0x40>
    if (count == 1) {
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d10a      	bne.n	8001b18 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2203      	movs	r2, #3
 8001b08:	9200      	str	r2, [sp, #0]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f000 f9c6 	bl	8001ea0 <xQueueGenericCreateStatic>
 8001b14:	4603      	mov	r3, r0
 8001b16:	e023      	b.n	8001b60 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8001b18:	6838      	ldr	r0, [r7, #0]
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	461a      	mov	r2, r3
 8001b22:	f000 fa91 	bl	8002048 <xQueueCreateCountingSemaphoreStatic>
 8001b26:	4603      	mov	r3, r0
 8001b28:	e01a      	b.n	8001b60 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d110      	bne.n	8001b52 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8001b30:	2203      	movs	r2, #3
 8001b32:	2100      	movs	r1, #0
 8001b34:	2001      	movs	r0, #1
 8001b36:	f000 fa2a 	bl	8001f8e <xQueueGenericCreate>
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <osSemaphoreCreate+0x64>
 8001b42:	2300      	movs	r3, #0
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fae7 	bl	800211c <xQueueGenericSend>
      return sema;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	e006      	b.n	8001b60 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 faac 	bl	80020b6 <xQueueCreateCountingSemaphore>
 8001b5e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	e03a      	b.n	8001bf6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b8a:	d103      	bne.n	8001b94 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e009      	b.n	8001ba8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d006      	beq.n	8001ba8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <osSemaphoreWait+0x40>
      ticks = 1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001ba8:	f7ff ff27 	bl	80019fa <inHandlerMode>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d017      	beq.n	8001be2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2100      	movs	r1, #0
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fd46 	bl	800264c <xQueueReceiveFromISR>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d001      	beq.n	8001bca <osSemaphoreWait+0x62>
      return osErrorOS;
 8001bc6:	23ff      	movs	r3, #255	; 0xff
 8001bc8:	e015      	b.n	8001bf6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d011      	beq.n	8001bf4 <osSemaphoreWait+0x8c>
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <osSemaphoreWait+0x98>)
 8001bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	f3bf 8f4f 	dsb	sy
 8001bdc:	f3bf 8f6f 	isb	sy
 8001be0:	e008      	b.n	8001bf4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001be2:	68f9      	ldr	r1, [r7, #12]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fc25 	bl	8002434 <xQueueSemaphoreTake>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d001      	beq.n	8001bf4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001bf0:	23ff      	movs	r3, #255	; 0xff
 8001bf2:	e000      	b.n	8001bf6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000ed04 	.word	0xe000ed04

08001c04 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001c14:	f7ff fef1 	bl	80019fa <inHandlerMode>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d016      	beq.n	8001c4c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fb77 	bl	8002318 <xQueueGiveFromISR>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d001      	beq.n	8001c34 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001c30:	23ff      	movs	r3, #255	; 0xff
 8001c32:	e017      	b.n	8001c64 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d013      	beq.n	8001c62 <osSemaphoreRelease+0x5e>
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <osSemaphoreRelease+0x68>)
 8001c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f3bf 8f4f 	dsb	sy
 8001c46:	f3bf 8f6f 	isb	sy
 8001c4a:	e00a      	b.n	8001c62 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fa62 	bl	800211c <xQueueGenericSend>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001c5e:	23ff      	movs	r3, #255	; 0xff
 8001c60:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	e000ed04 	.word	0xe000ed04

08001c70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f103 0208 	add.w	r2, r3, #8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f103 0208 	add.w	r2, r3, #8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f103 0208 	add.w	r2, r3, #8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d22:	d103      	bne.n	8001d2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	e00c      	b.n	8001d46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3308      	adds	r3, #8
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	e002      	b.n	8001d3a <vListInsert+0x2e>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d2f6      	bcs.n	8001d34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6892      	ldr	r2, [r2, #8]
 8001d92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6852      	ldr	r2, [r2, #4]
 8001d9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d103      	bne.n	8001db0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	1e5a      	subs	r2, r3, #1
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
	...

08001dd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10a      	bne.n	8001dfa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001df6:	bf00      	nop
 8001df8:	e7fe      	b.n	8001df8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001dfa:	f001 fef7 	bl	8003bec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	441a      	add	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	441a      	add	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	22ff      	movs	r2, #255	; 0xff
 8001e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	22ff      	movs	r2, #255	; 0xff
 8001e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d114      	bne.n	8001e7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01a      	beq.n	8001e8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3310      	adds	r3, #16
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 f9c9 	bl	80031f4 <xTaskRemoveFromEventList>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d012      	beq.n	8001e8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <xQueueGenericReset+0xcc>)
 8001e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	f3bf 8f4f 	dsb	sy
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	e009      	b.n	8001e8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fef6 	bl	8001c70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3324      	adds	r3, #36	; 0x24
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fef1 	bl	8001c70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e8e:	f001 fedd 	bl	8003c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	e000ed04 	.word	0xe000ed04

08001ea0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ec6:	bf00      	nop
 8001ec8:	e7fe      	b.n	8001ec8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10a      	bne.n	8001ee6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed4:	f383 8811 	msr	BASEPRI, r3
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ee2:	bf00      	nop
 8001ee4:	e7fe      	b.n	8001ee4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <xQueueGenericCreateStatic+0x52>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <xQueueGenericCreateStatic+0x56>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <xQueueGenericCreateStatic+0x58>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	623b      	str	r3, [r7, #32]
}
 8001f0e:	bf00      	nop
 8001f10:	e7fe      	b.n	8001f10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <xQueueGenericCreateStatic+0x7e>
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <xQueueGenericCreateStatic+0x82>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <xQueueGenericCreateStatic+0x84>
 8001f22:	2300      	movs	r3, #0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10a      	bne.n	8001f3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2c:	f383 8811 	msr	BASEPRI, r3
 8001f30:	f3bf 8f6f 	isb	sy
 8001f34:	f3bf 8f4f 	dsb	sy
 8001f38:	61fb      	str	r3, [r7, #28]
}
 8001f3a:	bf00      	nop
 8001f3c:	e7fe      	b.n	8001f3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f3e:	2348      	movs	r3, #72	; 0x48
 8001f40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b48      	cmp	r3, #72	; 0x48
 8001f46:	d00a      	beq.n	8001f5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4c:	f383 8811 	msr	BASEPRI, r3
 8001f50:	f3bf 8f6f 	isb	sy
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	61bb      	str	r3, [r7, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	e7fe      	b.n	8001f5c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00d      	beq.n	8001f84 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f70:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f843 	bl	800200a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3730      	adds	r7, #48	; 0x30
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b08a      	sub	sp, #40	; 0x28
 8001f92:	af02      	add	r7, sp, #8
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	613b      	str	r3, [r7, #16]
}
 8001fb4:	bf00      	nop
 8001fb6:	e7fe      	b.n	8001fb6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e004      	b.n	8001fce <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3348      	adds	r3, #72	; 0x48
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 fef8 	bl	8003dc8 <pvPortMalloc>
 8001fd8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00f      	beq.n	8002000 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	3348      	adds	r3, #72	; 0x48
 8001fe4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fee:	79fa      	ldrb	r2, [r7, #7]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f805 	bl	800200a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002000:	69bb      	ldr	r3, [r7, #24]
	}
 8002002:	4618      	mov	r0, r3
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d103      	bne.n	8002026 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e002      	b.n	800202c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002038:	2101      	movs	r1, #1
 800203a:	69b8      	ldr	r0, [r7, #24]
 800203c:	f7ff fec8 	bl	8001dd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	61bb      	str	r3, [r7, #24]
}
 800206c:	bf00      	nop
 800206e:	e7fe      	b.n	800206e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d90a      	bls.n	800208e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	617b      	str	r3, [r7, #20]
}
 800208a:	bf00      	nop
 800208c:	e7fe      	b.n	800208c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800208e:	2302      	movs	r3, #2
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f7ff ff01 	bl	8001ea0 <xQueueGenericCreateStatic>
 800209e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80020ac:	69fb      	ldr	r3, [r7, #28]
	}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10a      	bne.n	80020dc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80020c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ca:	f383 8811 	msr	BASEPRI, r3
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	f3bf 8f4f 	dsb	sy
 80020d6:	613b      	str	r3, [r7, #16]
}
 80020d8:	bf00      	nop
 80020da:	e7fe      	b.n	80020da <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d90a      	bls.n	80020fa <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80020e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e8:	f383 8811 	msr	BASEPRI, r3
 80020ec:	f3bf 8f6f 	isb	sy
 80020f0:	f3bf 8f4f 	dsb	sy
 80020f4:	60fb      	str	r3, [r7, #12]
}
 80020f6:	bf00      	nop
 80020f8:	e7fe      	b.n	80020f8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80020fa:	2202      	movs	r2, #2
 80020fc:	2100      	movs	r1, #0
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ff45 	bl	8001f8e <xQueueGenericCreate>
 8002104:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002112:	697b      	ldr	r3, [r7, #20]
	}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	; 0x38
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800212a:	2300      	movs	r3, #0
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <xQueueGenericSend+0x32>
	__asm volatile
 8002138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213c:	f383 8811 	msr	BASEPRI, r3
 8002140:	f3bf 8f6f 	isb	sy
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800214a:	bf00      	nop
 800214c:	e7fe      	b.n	800214c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d103      	bne.n	800215c <xQueueGenericSend+0x40>
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <xQueueGenericSend+0x44>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <xQueueGenericSend+0x46>
 8002160:	2300      	movs	r3, #0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10a      	bne.n	800217c <xQueueGenericSend+0x60>
	__asm volatile
 8002166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216a:	f383 8811 	msr	BASEPRI, r3
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f3bf 8f4f 	dsb	sy
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002178:	bf00      	nop
 800217a:	e7fe      	b.n	800217a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d103      	bne.n	800218a <xQueueGenericSend+0x6e>
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <xQueueGenericSend+0x72>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <xQueueGenericSend+0x74>
 800218e:	2300      	movs	r3, #0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <xQueueGenericSend+0x8e>
	__asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	623b      	str	r3, [r7, #32]
}
 80021a6:	bf00      	nop
 80021a8:	e7fe      	b.n	80021a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021aa:	f001 f9e7 	bl	800357c <xTaskGetSchedulerState>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <xQueueGenericSend+0x9e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <xQueueGenericSend+0xa2>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <xQueueGenericSend+0xa4>
 80021be:	2300      	movs	r3, #0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <xQueueGenericSend+0xbe>
	__asm volatile
 80021c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	f3bf 8f4f 	dsb	sy
 80021d4:	61fb      	str	r3, [r7, #28]
}
 80021d6:	bf00      	nop
 80021d8:	e7fe      	b.n	80021d8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021da:	f001 fd07 	bl	8003bec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d302      	bcc.n	80021f0 <xQueueGenericSend+0xd4>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d129      	bne.n	8002244 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f6:	f000 fac0 	bl	800277a <prvCopyDataToQueue>
 80021fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	2b00      	cmp	r3, #0
 8002202:	d010      	beq.n	8002226 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	3324      	adds	r3, #36	; 0x24
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fff3 	bl	80031f4 <xTaskRemoveFromEventList>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002214:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <xQueueGenericSend+0x1f8>)
 8002216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	e00a      	b.n	800223c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <xQueueGenericSend+0x1f8>)
 800222e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800223c:	f001 fd06 	bl	8003c4c <vPortExitCritical>
				return pdPASS;
 8002240:	2301      	movs	r3, #1
 8002242:	e063      	b.n	800230c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800224a:	f001 fcff 	bl	8003c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800224e:	2300      	movs	r3, #0
 8002250:	e05c      	b.n	800230c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4618      	mov	r0, r3
 800225e:	f001 f82b 	bl	80032b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002262:	2301      	movs	r3, #1
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002266:	f001 fcf1 	bl	8003c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800226a:	f000 fdd5 	bl	8002e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800226e:	f001 fcbd 	bl	8003bec <vPortEnterCritical>
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002278:	b25b      	sxtb	r3, r3
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800227e:	d103      	bne.n	8002288 <xQueueGenericSend+0x16c>
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800228e:	b25b      	sxtb	r3, r3
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002294:	d103      	bne.n	800229e <xQueueGenericSend+0x182>
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800229e:	f001 fcd5 	bl	8003c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022a2:	1d3a      	adds	r2, r7, #4
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f001 f81a 	bl	80032e4 <xTaskCheckForTimeOut>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d124      	bne.n	8002300 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022b8:	f000 fb57 	bl	800296a <prvIsQueueFull>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d018      	beq.n	80022f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	3310      	adds	r3, #16
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 ff6e 	bl	80031ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022d2:	f000 fae2 	bl	800289a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022d6:	f000 fdad 	bl	8002e34 <xTaskResumeAll>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f af7c 	bne.w	80021da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <xQueueGenericSend+0x1f8>)
 80022e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	e772      	b.n	80021da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022f6:	f000 fad0 	bl	800289a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022fa:	f000 fd9b 	bl	8002e34 <xTaskResumeAll>
 80022fe:	e76c      	b.n	80021da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002302:	f000 faca 	bl	800289a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002306:	f000 fd95 	bl	8002e34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800230a:	2300      	movs	r3, #0
		}
	}
}
 800230c:	4618      	mov	r0, r3
 800230e:	3738      	adds	r7, #56	; 0x38
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	e000ed04 	.word	0xe000ed04

08002318 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	; 0x38
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	623b      	str	r3, [r7, #32]
}
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <xQueueGiveFromISR+0x48>
	__asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	61fb      	str	r3, [r7, #28]
}
 800235c:	bf00      	nop
 800235e:	e7fe      	b.n	800235e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <xQueueGiveFromISR+0x58>
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <xQueueGiveFromISR+0x5c>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <xQueueGiveFromISR+0x5e>
 8002374:	2300      	movs	r3, #0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <xQueueGiveFromISR+0x78>
	__asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	61bb      	str	r3, [r7, #24]
}
 800238c:	bf00      	nop
 800238e:	e7fe      	b.n	800238e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002390:	f001 fcee 	bl	8003d70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002394:	f3ef 8211 	mrs	r2, BASEPRI
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	617a      	str	r2, [r7, #20]
 80023aa:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80023ac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023bc:	429a      	cmp	r2, r3
 80023be:	d22b      	bcs.n	8002418 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80023d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023da:	d112      	bne.n	8002402 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d016      	beq.n	8002412 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	3324      	adds	r3, #36	; 0x24
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 ff03 	bl	80031f4 <xTaskRemoveFromEventList>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00e      	beq.n	8002412 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e007      	b.n	8002412 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002406:	3301      	adds	r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	b25a      	sxtb	r2, r3
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002412:	2301      	movs	r3, #1
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
 8002416:	e001      	b.n	800241c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002418:	2300      	movs	r3, #0
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002426:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800242a:	4618      	mov	r0, r3
 800242c:	3738      	adds	r7, #56	; 0x38
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08e      	sub	sp, #56	; 0x38
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800243e:	2300      	movs	r3, #0
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002446:	2300      	movs	r3, #0
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	623b      	str	r3, [r7, #32]
}
 8002462:	bf00      	nop
 8002464:	e7fe      	b.n	8002464 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	61fb      	str	r3, [r7, #28]
}
 8002480:	bf00      	nop
 8002482:	e7fe      	b.n	8002482 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002484:	f001 f87a 	bl	800357c <xTaskGetSchedulerState>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <xQueueSemaphoreTake+0x60>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <xQueueSemaphoreTake+0x64>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <xQueueSemaphoreTake+0x66>
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10a      	bne.n	80024b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	61bb      	str	r3, [r7, #24]
}
 80024b0:	bf00      	nop
 80024b2:	e7fe      	b.n	80024b2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80024b4:	f001 fb9a 	bl	8003bec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d024      	beq.n	800250e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	1e5a      	subs	r2, r3, #1
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d104      	bne.n	80024de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80024d4:	f001 fa1c 	bl	8003910 <pvTaskIncrementMutexHeldCount>
 80024d8:	4602      	mov	r2, r0
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00f      	beq.n	8002506 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	3310      	adds	r3, #16
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fe82 	bl	80031f4 <xTaskRemoveFromEventList>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024f6:	4b54      	ldr	r3, [pc, #336]	; (8002648 <xQueueSemaphoreTake+0x214>)
 80024f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002506:	f001 fba1 	bl	8003c4c <vPortExitCritical>
				return pdPASS;
 800250a:	2301      	movs	r3, #1
 800250c:	e097      	b.n	800263e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d111      	bne.n	8002538 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	617b      	str	r3, [r7, #20]
}
 800252c:	bf00      	nop
 800252e:	e7fe      	b.n	800252e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002530:	f001 fb8c 	bl	8003c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002534:	2300      	movs	r3, #0
 8002536:	e082      	b.n	800263e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	4618      	mov	r0, r3
 8002544:	f000 feb8 	bl	80032b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002548:	2301      	movs	r3, #1
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800254c:	f001 fb7e 	bl	8003c4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002550:	f000 fc62 	bl	8002e18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002554:	f001 fb4a 	bl	8003bec <vPortEnterCritical>
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800255e:	b25b      	sxtb	r3, r3
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002564:	d103      	bne.n	800256e <xQueueSemaphoreTake+0x13a>
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002574:	b25b      	sxtb	r3, r3
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800257a:	d103      	bne.n	8002584 <xQueueSemaphoreTake+0x150>
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002584:	f001 fb62 	bl	8003c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002588:	463a      	mov	r2, r7
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fea7 	bl	80032e4 <xTaskCheckForTimeOut>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d132      	bne.n	8002602 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800259c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800259e:	f000 f9ce 	bl	800293e <prvIsQueueEmpty>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d026      	beq.n	80025f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80025b0:	f001 fb1c 	bl	8003bec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fffd 	bl	80035b8 <xTaskPriorityInherit>
 80025be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80025c0:	f001 fb44 	bl	8003c4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	3324      	adds	r3, #36	; 0x24
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fded 	bl	80031ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80025d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025d4:	f000 f961 	bl	800289a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80025d8:	f000 fc2c 	bl	8002e34 <xTaskResumeAll>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f47f af68 	bne.w	80024b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <xQueueSemaphoreTake+0x214>)
 80025e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	e75e      	b.n	80024b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80025f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025f8:	f000 f94f 	bl	800289a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025fc:	f000 fc1a 	bl	8002e34 <xTaskResumeAll>
 8002600:	e758      	b.n	80024b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002604:	f000 f949 	bl	800289a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002608:	f000 fc14 	bl	8002e34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800260c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800260e:	f000 f996 	bl	800293e <prvIsQueueEmpty>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f43f af4d 	beq.w	80024b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00d      	beq.n	800263c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002620:	f001 fae4 	bl	8003bec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002626:	f000 f891 	bl	800274c <prvGetDisinheritPriorityAfterTimeout>
 800262a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002632:	4618      	mov	r0, r3
 8002634:	f001 f8cc 	bl	80037d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002638:	f001 fb08 	bl	8003c4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800263c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800263e:	4618      	mov	r0, r3
 8002640:	3738      	adds	r7, #56	; 0x38
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000ed04 	.word	0xe000ed04

0800264c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08e      	sub	sp, #56	; 0x38
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10a      	bne.n	8002678 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	623b      	str	r3, [r7, #32]
}
 8002674:	bf00      	nop
 8002676:	e7fe      	b.n	8002676 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <xQueueReceiveFromISR+0x3a>
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <xQueueReceiveFromISR+0x3e>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <xQueueReceiveFromISR+0x40>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	61fb      	str	r3, [r7, #28]
}
 80026a2:	bf00      	nop
 80026a4:	e7fe      	b.n	80026a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026a6:	f001 fb63 	bl	8003d70 <vPortValidateInterruptPriority>
	__asm volatile
 80026aa:	f3ef 8211 	mrs	r2, BASEPRI
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	61ba      	str	r2, [r7, #24]
 80026c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80026c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d02f      	beq.n	8002732 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e0:	f000 f8b5 	bl	800284e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80026ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f4:	d112      	bne.n	800271c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	3310      	adds	r3, #16
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fd76 	bl	80031f4 <xTaskRemoveFromEventList>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e007      	b.n	800272c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800271c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002720:	3301      	adds	r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	b25a      	sxtb	r2, r3
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800272c:	2301      	movs	r3, #1
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
 8002730:	e001      	b.n	8002736 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002732:	2300      	movs	r3, #0
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	613b      	str	r3, [r7, #16]
	__asm volatile
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f383 8811 	msr	BASEPRI, r3
}
 8002740:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002744:	4618      	mov	r0, r3
 8002746:	3738      	adds	r7, #56	; 0x38
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f1c3 0307 	rsb	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e001      	b.n	800276e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800276e:	68fb      	ldr	r3, [r7, #12]
	}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10d      	bne.n	80027b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d14d      	bne.n	800283c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 ff8d 	bl	80036c4 <xTaskPriorityDisinherit>
 80027aa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	e043      	b.n	800283c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6898      	ldr	r0, [r3, #8]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	461a      	mov	r2, r3
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	f001 fcfd 	bl	80041c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	441a      	add	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d32b      	bcc.n	800283c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	e026      	b.n	800283c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	68d8      	ldr	r0, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	461a      	mov	r2, r3
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	f001 fce3 	bl	80041c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	425b      	negs	r3, r3
 8002808:	441a      	add	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d207      	bcs.n	800282a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	425b      	negs	r3, r3
 8002824:	441a      	add	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d105      	bne.n	800283c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	3b01      	subs	r3, #1
 800283a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002844:	697b      	ldr	r3, [r7, #20]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2b00      	cmp	r3, #0
 800285e:	d018      	beq.n	8002892 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	441a      	add	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d303      	bcc.n	8002882 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	461a      	mov	r2, r3
 800288c:	6838      	ldr	r0, [r7, #0]
 800288e:	f001 fc99 	bl	80041c4 <memcpy>
	}
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80028a2:	f001 f9a3 	bl	8003bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028ae:	e011      	b.n	80028d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d012      	beq.n	80028de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3324      	adds	r3, #36	; 0x24
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fc99 	bl	80031f4 <xTaskRemoveFromEventList>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80028c8:	f000 fd6e 	bl	80033a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	dce9      	bgt.n	80028b0 <prvUnlockQueue+0x16>
 80028dc:	e000      	b.n	80028e0 <prvUnlockQueue+0x46>
					break;
 80028de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	22ff      	movs	r2, #255	; 0xff
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80028e8:	f001 f9b0 	bl	8003c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80028ec:	f001 f97e 	bl	8003bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028f8:	e011      	b.n	800291e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d012      	beq.n	8002928 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3310      	adds	r3, #16
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fc74 	bl	80031f4 <xTaskRemoveFromEventList>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002912:	f000 fd49 	bl	80033a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002916:	7bbb      	ldrb	r3, [r7, #14]
 8002918:	3b01      	subs	r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800291e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002922:	2b00      	cmp	r3, #0
 8002924:	dce9      	bgt.n	80028fa <prvUnlockQueue+0x60>
 8002926:	e000      	b.n	800292a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002928:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	22ff      	movs	r2, #255	; 0xff
 800292e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002932:	f001 f98b 	bl	8003c4c <vPortExitCritical>
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002946:	f001 f951 	bl	8003bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002952:	2301      	movs	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e001      	b.n	800295c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800295c:	f001 f976 	bl	8003c4c <vPortExitCritical>

	return xReturn;
 8002960:	68fb      	ldr	r3, [r7, #12]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002972:	f001 f93b 	bl	8003bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	429a      	cmp	r2, r3
 8002980:	d102      	bne.n	8002988 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002982:	2301      	movs	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e001      	b.n	800298c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800298c:	f001 f95e 	bl	8003c4c <vPortExitCritical>

	return xReturn;
 8002990:	68fb      	ldr	r3, [r7, #12]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800299a:	b580      	push	{r7, lr}
 800299c:	b08e      	sub	sp, #56	; 0x38
 800299e:	af04      	add	r7, sp, #16
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <xTaskCreateStatic+0x2a>
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	623b      	str	r3, [r7, #32]
}
 80029c0:	bf00      	nop
 80029c2:	e7fe      	b.n	80029c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80029c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <xTaskCreateStatic+0x46>
	__asm volatile
 80029ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	61fb      	str	r3, [r7, #28]
}
 80029dc:	bf00      	nop
 80029de:	e7fe      	b.n	80029de <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029e0:	23b4      	movs	r3, #180	; 0xb4
 80029e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2bb4      	cmp	r3, #180	; 0xb4
 80029e8:	d00a      	beq.n	8002a00 <xTaskCreateStatic+0x66>
	__asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	61bb      	str	r3, [r7, #24]
}
 80029fc:	bf00      	nop
 80029fe:	e7fe      	b.n	80029fe <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01e      	beq.n	8002a44 <xTaskCreateStatic+0xaa>
 8002a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9303      	str	r3, [sp, #12]
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f850 	bl	8002adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a3e:	f000 f8e3 	bl	8002c08 <prvAddNewTaskToReadyList>
 8002a42:	e001      	b.n	8002a48 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a48:	697b      	ldr	r3, [r7, #20]
	}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b08c      	sub	sp, #48	; 0x30
 8002a56:	af04      	add	r7, sp, #16
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 f9ae 	bl	8003dc8 <pvPortMalloc>
 8002a6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00e      	beq.n	8002a92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a74:	20b4      	movs	r0, #180	; 0xb4
 8002a76:	f001 f9a7 	bl	8003dc8 <pvPortMalloc>
 8002a7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
 8002a88:	e005      	b.n	8002a96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f001 fa60 	bl	8003f50 <vPortFree>
 8002a90:	e001      	b.n	8002a96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d017      	beq.n	8002acc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9303      	str	r3, [sp, #12]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f80e 	bl	8002adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ac0:	69f8      	ldr	r0, [r7, #28]
 8002ac2:	f000 f8a1 	bl	8002c08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	e002      	b.n	8002ad2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
	}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3720      	adds	r7, #32
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002af4:	3b01      	subs	r3, #1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f023 0307 	bic.w	r3, r3, #7
 8002b02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	617b      	str	r3, [r7, #20]
}
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	e012      	b.n	8002b50 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	4413      	add	r3, r2
 8002b30:	7819      	ldrb	r1, [r3, #0]
 8002b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	3334      	adds	r3, #52	; 0x34
 8002b3a:	460a      	mov	r2, r1
 8002b3c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d006      	beq.n	8002b58 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	61fb      	str	r3, [r7, #28]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2b0f      	cmp	r3, #15
 8002b54:	d9e9      	bls.n	8002b2a <prvInitialiseNewTask+0x4e>
 8002b56:	e000      	b.n	8002b5a <prvInitialiseNewTask+0x7e>
		{
			break;
 8002b58:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d901      	bls.n	8002b6c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b68:	2306      	movs	r3, #6
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	3304      	adds	r3, #4
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f893 	bl	8001cae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	3318      	adds	r3, #24
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f88e 	bl	8001cae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	f1c3 0207 	rsb	r2, r3, #7
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	334c      	adds	r3, #76	; 0x4c
 8002bbc:	2260      	movs	r2, #96	; 0x60
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f001 fb0d 	bl	80041e0 <memset>
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <prvInitialiseNewTask+0x120>)
 8002bca:	651a      	str	r2, [r3, #80]	; 0x50
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <prvInitialiseNewTask+0x124>)
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <prvInitialiseNewTask+0x128>)
 8002bd6:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	69b8      	ldr	r0, [r7, #24]
 8002bde:	f000 ff11 	bl	8003a04 <pxPortInitialiseStack>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bf4:	bf00      	nop
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	080044d8 	.word	0x080044d8
 8002c00:	080044f8 	.word	0x080044f8
 8002c04:	080044b8 	.word	0x080044b8

08002c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c10:	f000 ffec 	bl	8003bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c14:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <prvAddNewTaskToReadyList+0xb8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	4a29      	ldr	r2, [pc, #164]	; (8002cc0 <prvAddNewTaskToReadyList+0xb8>)
 8002c1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c1e:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <prvAddNewTaskToReadyList+0xbc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c26:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <prvAddNewTaskToReadyList+0xbc>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c2c:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <prvAddNewTaskToReadyList+0xb8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d110      	bne.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c34:	f000 fbdc 	bl	80033f0 <prvInitialiseTaskLists>
 8002c38:	e00d      	b.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <prvAddNewTaskToReadyList+0xc0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <prvAddNewTaskToReadyList+0xbc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d802      	bhi.n	8002c56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c50:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <prvAddNewTaskToReadyList+0xbc>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c56:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <prvAddNewTaskToReadyList+0xc4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <prvAddNewTaskToReadyList+0xc4>)
 8002c5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	2201      	movs	r2, #1
 8002c66:	409a      	lsls	r2, r3
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <prvAddNewTaskToReadyList+0xc8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <prvAddNewTaskToReadyList+0xc8>)
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <prvAddNewTaskToReadyList+0xcc>)
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3304      	adds	r3, #4
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f7ff f81c 	bl	8001cc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c8e:	f000 ffdd 	bl	8003c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <prvAddNewTaskToReadyList+0xc0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00e      	beq.n	8002cb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <prvAddNewTaskToReadyList+0xbc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d207      	bcs.n	8002cb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <prvAddNewTaskToReadyList+0xd0>)
 8002caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000450 	.word	0x20000450
 8002cc4:	20000350 	.word	0x20000350
 8002cc8:	2000045c 	.word	0x2000045c
 8002ccc:	2000046c 	.word	0x2000046c
 8002cd0:	20000458 	.word	0x20000458
 8002cd4:	20000354 	.word	0x20000354
 8002cd8:	e000ed04 	.word	0xe000ed04

08002cdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d017      	beq.n	8002d1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <vTaskDelay+0x60>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <vTaskDelay+0x30>
	__asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	60bb      	str	r3, [r7, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	e7fe      	b.n	8002d0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d0c:	f000 f884 	bl	8002e18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d10:	2100      	movs	r1, #0
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fe10 	bl	8003938 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d18:	f000 f88c 	bl	8002e34 <xTaskResumeAll>
 8002d1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <vTaskDelay+0x64>)
 8002d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000478 	.word	0x20000478
 8002d40:	e000ed04 	.word	0xe000ed04

08002d44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d52:	463a      	mov	r2, r7
 8002d54:	1d39      	adds	r1, r7, #4
 8002d56:	f107 0308 	add.w	r3, r7, #8
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe f8b2 	bl	8000ec4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	9202      	str	r2, [sp, #8]
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	460a      	mov	r2, r1
 8002d72:	4921      	ldr	r1, [pc, #132]	; (8002df8 <vTaskStartScheduler+0xb4>)
 8002d74:	4821      	ldr	r0, [pc, #132]	; (8002dfc <vTaskStartScheduler+0xb8>)
 8002d76:	f7ff fe10 	bl	800299a <xTaskCreateStatic>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <vTaskStartScheduler+0xbc>)
 8002d7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d80:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <vTaskStartScheduler+0xbc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e001      	b.n	8002d92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d11b      	bne.n	8002dd0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	613b      	str	r3, [r7, #16]
}
 8002daa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002dac:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <vTaskStartScheduler+0xc0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	334c      	adds	r3, #76	; 0x4c
 8002db2:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <vTaskStartScheduler+0xc4>)
 8002db4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <vTaskStartScheduler+0xc8>)
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <vTaskStartScheduler+0xcc>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <vTaskStartScheduler+0xd0>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002dca:	f000 fe9d 	bl	8003b08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dce:	e00e      	b.n	8002dee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd6:	d10a      	bne.n	8002dee <vTaskStartScheduler+0xaa>
	__asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	60fb      	str	r3, [r7, #12]
}
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <vTaskStartScheduler+0xa8>
}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	080044b0 	.word	0x080044b0
 8002dfc:	080033c1 	.word	0x080033c1
 8002e00:	20000474 	.word	0x20000474
 8002e04:	20000350 	.word	0x20000350
 8002e08:	2000001c 	.word	0x2000001c
 8002e0c:	20000470 	.word	0x20000470
 8002e10:	2000045c 	.word	0x2000045c
 8002e14:	20000454 	.word	0x20000454

08002e18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <vTaskSuspendAll+0x18>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <vTaskSuspendAll+0x18>)
 8002e24:	6013      	str	r3, [r2, #0]
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000478 	.word	0x20000478

08002e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <xTaskResumeAll+0x114>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <xTaskResumeAll+0x2c>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	603b      	str	r3, [r7, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	e7fe      	b.n	8002e5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e60:	f000 fec4 	bl	8003bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e64:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <xTaskResumeAll+0x114>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	4a37      	ldr	r2, [pc, #220]	; (8002f48 <xTaskResumeAll+0x114>)
 8002e6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e6e:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <xTaskResumeAll+0x114>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d161      	bne.n	8002f3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e76:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <xTaskResumeAll+0x118>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d05d      	beq.n	8002f3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e7e:	e02e      	b.n	8002ede <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e80:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <xTaskResumeAll+0x11c>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3318      	adds	r3, #24
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe ff75 	bl	8001d7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3304      	adds	r3, #4
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe ff70 	bl	8001d7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <xTaskResumeAll+0x120>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <xTaskResumeAll+0x120>)
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <xTaskResumeAll+0x124>)
 8002ebc:	441a      	add	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f7fe fefe 	bl	8001cc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ece:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <xTaskResumeAll+0x128>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d302      	bcc.n	8002ede <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ed8:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <xTaskResumeAll+0x12c>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ede:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <xTaskResumeAll+0x11c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1cc      	bne.n	8002e80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002eec:	f000 fb22 	bl	8003534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <xTaskResumeAll+0x130>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d010      	beq.n	8002f1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002efc:	f000 f836 	bl	8002f6c <xTaskIncrementTick>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <xTaskResumeAll+0x12c>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f1      	bne.n	8002efc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <xTaskResumeAll+0x130>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <xTaskResumeAll+0x12c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f26:	2301      	movs	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <xTaskResumeAll+0x134>)
 8002f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f3a:	f000 fe87 	bl	8003c4c <vPortExitCritical>

	return xAlreadyYielded;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000478 	.word	0x20000478
 8002f4c:	20000450 	.word	0x20000450
 8002f50:	20000410 	.word	0x20000410
 8002f54:	20000458 	.word	0x20000458
 8002f58:	20000354 	.word	0x20000354
 8002f5c:	20000350 	.word	0x20000350
 8002f60:	20000464 	.word	0x20000464
 8002f64:	20000460 	.word	0x20000460
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f76:	4b51      	ldr	r3, [pc, #324]	; (80030bc <xTaskIncrementTick+0x150>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 808d 	bne.w	800309a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f80:	4b4f      	ldr	r3, [pc, #316]	; (80030c0 <xTaskIncrementTick+0x154>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f88:	4a4d      	ldr	r2, [pc, #308]	; (80030c0 <xTaskIncrementTick+0x154>)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d120      	bne.n	8002fd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f94:	4b4b      	ldr	r3, [pc, #300]	; (80030c4 <xTaskIncrementTick+0x158>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <xTaskIncrementTick+0x48>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	603b      	str	r3, [r7, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	e7fe      	b.n	8002fb2 <xTaskIncrementTick+0x46>
 8002fb4:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <xTaskIncrementTick+0x158>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <xTaskIncrementTick+0x15c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a41      	ldr	r2, [pc, #260]	; (80030c4 <xTaskIncrementTick+0x158>)
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4a41      	ldr	r2, [pc, #260]	; (80030c8 <xTaskIncrementTick+0x15c>)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b40      	ldr	r3, [pc, #256]	; (80030cc <xTaskIncrementTick+0x160>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	4a3f      	ldr	r2, [pc, #252]	; (80030cc <xTaskIncrementTick+0x160>)
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	f000 faaf 	bl	8003534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <xTaskIncrementTick+0x164>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d34d      	bcc.n	800307c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe0:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <xTaskIncrementTick+0x158>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <xTaskIncrementTick+0x82>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <xTaskIncrementTick+0x84>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <xTaskIncrementTick+0x164>)
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ffa:	601a      	str	r2, [r3, #0]
					break;
 8002ffc:	e03e      	b.n	800307c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <xTaskIncrementTick+0x158>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d203      	bcs.n	800301e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003016:	4a2e      	ldr	r2, [pc, #184]	; (80030d0 <xTaskIncrementTick+0x164>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6013      	str	r3, [r2, #0]
						break;
 800301c:	e02e      	b.n	800307c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	3304      	adds	r3, #4
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe feaa 	bl	8001d7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3318      	adds	r3, #24
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fea1 	bl	8001d7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	2201      	movs	r2, #1
 8003040:	409a      	lsls	r2, r3
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <xTaskIncrementTick+0x168>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <xTaskIncrementTick+0x168>)
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <xTaskIncrementTick+0x16c>)
 800305a:	441a      	add	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	3304      	adds	r3, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4610      	mov	r0, r2
 8003064:	f7fe fe2f 	bl	8001cc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <xTaskIncrementTick+0x170>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	429a      	cmp	r2, r3
 8003074:	d3b4      	bcc.n	8002fe0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003076:	2301      	movs	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800307a:	e7b1      	b.n	8002fe0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <xTaskIncrementTick+0x170>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	4915      	ldr	r1, [pc, #84]	; (80030d8 <xTaskIncrementTick+0x16c>)
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d907      	bls.n	80030a4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e004      	b.n	80030a4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <xTaskIncrementTick+0x174>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	4a0f      	ldr	r2, [pc, #60]	; (80030e0 <xTaskIncrementTick+0x174>)
 80030a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <xTaskIncrementTick+0x178>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80030ac:	2301      	movs	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030b0:	697b      	ldr	r3, [r7, #20]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000478 	.word	0x20000478
 80030c0:	20000454 	.word	0x20000454
 80030c4:	20000408 	.word	0x20000408
 80030c8:	2000040c 	.word	0x2000040c
 80030cc:	20000468 	.word	0x20000468
 80030d0:	20000470 	.word	0x20000470
 80030d4:	20000458 	.word	0x20000458
 80030d8:	20000354 	.word	0x20000354
 80030dc:	20000350 	.word	0x20000350
 80030e0:	20000460 	.word	0x20000460
 80030e4:	20000464 	.word	0x20000464

080030e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030ee:	4b29      	ldr	r3, [pc, #164]	; (8003194 <vTaskSwitchContext+0xac>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030f6:	4b28      	ldr	r3, [pc, #160]	; (8003198 <vTaskSwitchContext+0xb0>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030fc:	e044      	b.n	8003188 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80030fe:	4b26      	ldr	r3, [pc, #152]	; (8003198 <vTaskSwitchContext+0xb0>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <vTaskSwitchContext+0xb4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f1c3 031f 	rsb	r3, r3, #31
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	4921      	ldr	r1, [pc, #132]	; (80031a0 <vTaskSwitchContext+0xb8>)
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <vTaskSwitchContext+0x5c>
	__asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	607b      	str	r3, [r7, #4]
}
 8003140:	bf00      	nop
 8003142:	e7fe      	b.n	8003142 <vTaskSwitchContext+0x5a>
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4a14      	ldr	r2, [pc, #80]	; (80031a0 <vTaskSwitchContext+0xb8>)
 8003150:	4413      	add	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	3308      	adds	r3, #8
 8003166:	429a      	cmp	r2, r3
 8003168:	d104      	bne.n	8003174 <vTaskSwitchContext+0x8c>
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <vTaskSwitchContext+0xbc>)
 800317c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <vTaskSwitchContext+0xbc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	334c      	adds	r3, #76	; 0x4c
 8003184:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <vTaskSwitchContext+0xc0>)
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000478 	.word	0x20000478
 8003198:	20000464 	.word	0x20000464
 800319c:	20000458 	.word	0x20000458
 80031a0:	20000354 	.word	0x20000354
 80031a4:	20000350 	.word	0x20000350
 80031a8:	2000001c 	.word	0x2000001c

080031ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	60fb      	str	r3, [r7, #12]
}
 80031ce:	bf00      	nop
 80031d0:	e7fe      	b.n	80031d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031d2:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <vTaskPlaceOnEventList+0x44>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3318      	adds	r3, #24
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe fd96 	bl	8001d0c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031e0:	2101      	movs	r1, #1
 80031e2:	6838      	ldr	r0, [r7, #0]
 80031e4:	f000 fba8 	bl	8003938 <prvAddCurrentTaskToDelayedList>
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000350 	.word	0x20000350

080031f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	60fb      	str	r3, [r7, #12]
}
 800321c:	bf00      	nop
 800321e:	e7fe      	b.n	800321e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	3318      	adds	r3, #24
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fda9 	bl	8001d7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <xTaskRemoveFromEventList+0xac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d11c      	bne.n	800326c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	3304      	adds	r3, #4
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fda0 	bl	8001d7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	2201      	movs	r2, #1
 8003242:	409a      	lsls	r2, r3
 8003244:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <xTaskRemoveFromEventList+0xb0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <xTaskRemoveFromEventList+0xb0>)
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <xTaskRemoveFromEventList+0xb4>)
 800325c:	441a      	add	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	3304      	adds	r3, #4
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f7fe fd2e 	bl	8001cc6 <vListInsertEnd>
 800326a:	e005      	b.n	8003278 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	3318      	adds	r3, #24
 8003270:	4619      	mov	r1, r3
 8003272:	480e      	ldr	r0, [pc, #56]	; (80032ac <xTaskRemoveFromEventList+0xb8>)
 8003274:	f7fe fd27 	bl	8001cc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <xTaskRemoveFromEventList+0xbc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	429a      	cmp	r2, r3
 8003284:	d905      	bls.n	8003292 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003286:	2301      	movs	r3, #1
 8003288:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <xTaskRemoveFromEventList+0xc0>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e001      	b.n	8003296 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003296:	697b      	ldr	r3, [r7, #20]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000478 	.word	0x20000478
 80032a4:	20000458 	.word	0x20000458
 80032a8:	20000354 	.word	0x20000354
 80032ac:	20000410 	.word	0x20000410
 80032b0:	20000350 	.word	0x20000350
 80032b4:	20000464 	.word	0x20000464

080032b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <vTaskInternalSetTimeOutState+0x24>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <vTaskInternalSetTimeOutState+0x28>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	605a      	str	r2, [r3, #4]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000468 	.word	0x20000468
 80032e0:	20000454 	.word	0x20000454

080032e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	613b      	str	r3, [r7, #16]
}
 8003306:	bf00      	nop
 8003308:	e7fe      	b.n	8003308 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	60fb      	str	r3, [r7, #12]
}
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003326:	f000 fc61 	bl	8003bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <xTaskCheckForTimeOut+0xbc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003342:	d102      	bne.n	800334a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	e023      	b.n	8003392 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <xTaskCheckForTimeOut+0xc0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d007      	beq.n	8003366 <xTaskCheckForTimeOut+0x82>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	429a      	cmp	r2, r3
 800335e:	d302      	bcc.n	8003366 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003360:	2301      	movs	r3, #1
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	e015      	b.n	8003392 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	429a      	cmp	r2, r3
 800336e:	d20b      	bcs.n	8003388 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1ad2      	subs	r2, r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff9b 	bl	80032b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e004      	b.n	8003392 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800338e:	2301      	movs	r3, #1
 8003390:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003392:	f000 fc5b 	bl	8003c4c <vPortExitCritical>

	return xReturn;
 8003396:	69fb      	ldr	r3, [r7, #28]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3720      	adds	r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000454 	.word	0x20000454
 80033a4:	20000468 	.word	0x20000468

080033a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <vTaskMissedYield+0x14>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000464 	.word	0x20000464

080033c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033c8:	f000 f852 	bl	8003470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <prvIdleTask+0x28>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d9f9      	bls.n	80033c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <prvIdleTask+0x2c>)
 80033d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033e4:	e7f0      	b.n	80033c8 <prvIdleTask+0x8>
 80033e6:	bf00      	nop
 80033e8:	20000354 	.word	0x20000354
 80033ec:	e000ed04 	.word	0xe000ed04

080033f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033f6:	2300      	movs	r3, #0
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	e00c      	b.n	8003416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4a12      	ldr	r2, [pc, #72]	; (8003450 <prvInitialiseTaskLists+0x60>)
 8003408:	4413      	add	r3, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fc30 	bl	8001c70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3301      	adds	r3, #1
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b06      	cmp	r3, #6
 800341a:	d9ef      	bls.n	80033fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800341c:	480d      	ldr	r0, [pc, #52]	; (8003454 <prvInitialiseTaskLists+0x64>)
 800341e:	f7fe fc27 	bl	8001c70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003422:	480d      	ldr	r0, [pc, #52]	; (8003458 <prvInitialiseTaskLists+0x68>)
 8003424:	f7fe fc24 	bl	8001c70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003428:	480c      	ldr	r0, [pc, #48]	; (800345c <prvInitialiseTaskLists+0x6c>)
 800342a:	f7fe fc21 	bl	8001c70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800342e:	480c      	ldr	r0, [pc, #48]	; (8003460 <prvInitialiseTaskLists+0x70>)
 8003430:	f7fe fc1e 	bl	8001c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003434:	480b      	ldr	r0, [pc, #44]	; (8003464 <prvInitialiseTaskLists+0x74>)
 8003436:	f7fe fc1b 	bl	8001c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <prvInitialiseTaskLists+0x78>)
 800343c:	4a05      	ldr	r2, [pc, #20]	; (8003454 <prvInitialiseTaskLists+0x64>)
 800343e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <prvInitialiseTaskLists+0x7c>)
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <prvInitialiseTaskLists+0x68>)
 8003444:	601a      	str	r2, [r3, #0]
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000354 	.word	0x20000354
 8003454:	200003e0 	.word	0x200003e0
 8003458:	200003f4 	.word	0x200003f4
 800345c:	20000410 	.word	0x20000410
 8003460:	20000424 	.word	0x20000424
 8003464:	2000043c 	.word	0x2000043c
 8003468:	20000408 	.word	0x20000408
 800346c:	2000040c 	.word	0x2000040c

08003470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003476:	e019      	b.n	80034ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003478:	f000 fbb8 	bl	8003bec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800347c:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <prvCheckTasksWaitingTermination+0x50>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe fc77 	bl	8001d7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800348e:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <prvCheckTasksWaitingTermination+0x54>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3b01      	subs	r3, #1
 8003494:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <prvCheckTasksWaitingTermination+0x54>)
 8003496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <prvCheckTasksWaitingTermination+0x58>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3b01      	subs	r3, #1
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <prvCheckTasksWaitingTermination+0x58>)
 80034a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034a2:	f000 fbd3 	bl	8003c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f810 	bl	80034cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <prvCheckTasksWaitingTermination+0x58>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e1      	bne.n	8003478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000424 	.word	0x20000424
 80034c4:	20000450 	.word	0x20000450
 80034c8:	20000438 	.word	0x20000438

080034cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	334c      	adds	r3, #76	; 0x4c
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fe97 	bl	800420c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d108      	bne.n	80034fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fd2f 	bl	8003f50 <vPortFree>
				vPortFree( pxTCB );
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fd2c 	bl	8003f50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034f8:	e018      	b.n	800352c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d103      	bne.n	800350c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fd23 	bl	8003f50 <vPortFree>
	}
 800350a:	e00f      	b.n	800352c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003512:	2b02      	cmp	r3, #2
 8003514:	d00a      	beq.n	800352c <prvDeleteTCB+0x60>
	__asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	60fb      	str	r3, [r7, #12]
}
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <prvDeleteTCB+0x5e>
	}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <prvResetNextTaskUnblockTime+0x40>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <prvResetNextTaskUnblockTime+0x14>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <prvResetNextTaskUnblockTime+0x16>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <prvResetNextTaskUnblockTime+0x44>)
 8003550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003554:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003556:	e008      	b.n	800356a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <prvResetNextTaskUnblockTime+0x40>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4a04      	ldr	r2, [pc, #16]	; (8003578 <prvResetNextTaskUnblockTime+0x44>)
 8003568:	6013      	str	r3, [r2, #0]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	20000408 	.word	0x20000408
 8003578:	20000470 	.word	0x20000470

0800357c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <xTaskGetSchedulerState+0x34>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800358a:	2301      	movs	r3, #1
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	e008      	b.n	80035a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <xTaskGetSchedulerState+0x38>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003598:	2302      	movs	r3, #2
 800359a:	607b      	str	r3, [r7, #4]
 800359c:	e001      	b.n	80035a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035a2:	687b      	ldr	r3, [r7, #4]
	}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	2000045c 	.word	0x2000045c
 80035b4:	20000478 	.word	0x20000478

080035b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d06e      	beq.n	80036ac <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <xTaskPriorityInherit+0x100>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	429a      	cmp	r2, r3
 80035da:	d25e      	bcs.n	800369a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	db06      	blt.n	80035f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e4:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <xTaskPriorityInherit+0x100>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	f1c3 0207 	rsb	r2, r3, #7
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6959      	ldr	r1, [r3, #20]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a2e      	ldr	r2, [pc, #184]	; (80036bc <xTaskPriorityInherit+0x104>)
 8003604:	4413      	add	r3, r2
 8003606:	4299      	cmp	r1, r3
 8003608:	d101      	bne.n	800360e <xTaskPriorityInherit+0x56>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <xTaskPriorityInherit+0x58>
 800360e:	2300      	movs	r3, #0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d03a      	beq.n	800368a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	3304      	adds	r3, #4
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe fbaf 	bl	8001d7c <uxListRemove>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d115      	bne.n	8003650 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	4924      	ldr	r1, [pc, #144]	; (80036bc <xTaskPriorityInherit+0x104>)
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10a      	bne.n	8003650 <xTaskPriorityInherit+0x98>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	2201      	movs	r2, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43da      	mvns	r2, r3
 8003646:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <xTaskPriorityInherit+0x108>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4013      	ands	r3, r2
 800364c:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <xTaskPriorityInherit+0x108>)
 800364e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <xTaskPriorityInherit+0x100>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	2201      	movs	r2, #1
 8003660:	409a      	lsls	r2, r3
 8003662:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <xTaskPriorityInherit+0x108>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <xTaskPriorityInherit+0x108>)
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4a10      	ldr	r2, [pc, #64]	; (80036bc <xTaskPriorityInherit+0x104>)
 800367a:	441a      	add	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3304      	adds	r3, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f7fe fb1f 	bl	8001cc6 <vListInsertEnd>
 8003688:	e004      	b.n	8003694 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <xTaskPriorityInherit+0x100>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003694:	2301      	movs	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e008      	b.n	80036ac <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <xTaskPriorityInherit+0x100>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d201      	bcs.n	80036ac <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036ac:	68fb      	ldr	r3, [r7, #12]
	}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000350 	.word	0x20000350
 80036bc:	20000354 	.word	0x20000354
 80036c0:	20000458 	.word	0x20000458

080036c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d06e      	beq.n	80037b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036da:	4b3a      	ldr	r3, [pc, #232]	; (80037c4 <xTaskPriorityDisinherit+0x100>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d00a      	beq.n	80036fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60fb      	str	r3, [r7, #12]
}
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	60bb      	str	r3, [r7, #8]
}
 8003714:	bf00      	nop
 8003716:	e7fe      	b.n	8003716 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371c:	1e5a      	subs	r2, r3, #1
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	429a      	cmp	r2, r3
 800372c:	d044      	beq.n	80037b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003732:	2b00      	cmp	r3, #0
 8003734:	d140      	bne.n	80037b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	3304      	adds	r3, #4
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fb1e 	bl	8001d7c <uxListRemove>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d115      	bne.n	8003772 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374a:	491f      	ldr	r1, [pc, #124]	; (80037c8 <xTaskPriorityDisinherit+0x104>)
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <xTaskPriorityDisinherit+0xae>
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	2201      	movs	r2, #1
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43da      	mvns	r2, r3
 8003768:	4b18      	ldr	r3, [pc, #96]	; (80037cc <xTaskPriorityDisinherit+0x108>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4013      	ands	r3, r2
 800376e:	4a17      	ldr	r2, [pc, #92]	; (80037cc <xTaskPriorityDisinherit+0x108>)
 8003770:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	f1c3 0207 	rsb	r2, r3, #7
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	2201      	movs	r2, #1
 800378c:	409a      	lsls	r2, r3
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <xTaskPriorityDisinherit+0x108>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <xTaskPriorityDisinherit+0x108>)
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <xTaskPriorityDisinherit+0x104>)
 80037a6:	441a      	add	r2, r3
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f7fe fa89 	bl	8001cc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80037b8:	697b      	ldr	r3, [r7, #20]
	}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000350 	.word	0x20000350
 80037c8:	20000354 	.word	0x20000354
 80037cc:	20000458 	.word	0x20000458

080037d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80037de:	2301      	movs	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8088 	beq.w	80038fa <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	60fb      	str	r3, [r7, #12]
}
 8003804:	bf00      	nop
 8003806:	e7fe      	b.n	8003806 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d902      	bls.n	8003818 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	e002      	b.n	800381e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	429a      	cmp	r2, r3
 8003826:	d068      	beq.n	80038fa <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	429a      	cmp	r2, r3
 8003830:	d163      	bne.n	80038fa <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003832:	4b34      	ldr	r3, [pc, #208]	; (8003904 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	429a      	cmp	r2, r3
 800383a:	d10a      	bne.n	8003852 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	60bb      	str	r3, [r7, #8]
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	db04      	blt.n	8003870 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f1c3 0207 	rsb	r2, r3, #7
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6959      	ldr	r1, [r3, #20]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4a22      	ldr	r2, [pc, #136]	; (8003908 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003880:	4413      	add	r3, r2
 8003882:	4299      	cmp	r1, r3
 8003884:	d101      	bne.n	800388a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800388a:	2300      	movs	r3, #0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d034      	beq.n	80038fa <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	3304      	adds	r3, #4
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe fa71 	bl	8001d7c <uxListRemove>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d115      	bne.n	80038cc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a4:	4918      	ldr	r1, [pc, #96]	; (8003908 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	2201      	movs	r2, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43da      	mvns	r2, r3
 80038c2:	4b12      	ldr	r3, [pc, #72]	; (800390c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4013      	ands	r3, r2
 80038c8:	4a10      	ldr	r2, [pc, #64]	; (800390c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80038ca:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	4a0c      	ldr	r2, [pc, #48]	; (800390c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4a07      	ldr	r2, [pc, #28]	; (8003908 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80038ec:	441a      	add	r2, r3
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7fe f9e6 	bl	8001cc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038fa:	bf00      	nop
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000350 	.word	0x20000350
 8003908:	20000354 	.word	0x20000354
 800390c:	20000458 	.word	0x20000458

08003910 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003914:	4b07      	ldr	r3, [pc, #28]	; (8003934 <pvTaskIncrementMutexHeldCount+0x24>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <pvTaskIncrementMutexHeldCount+0x24>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003922:	3201      	adds	r2, #1
 8003924:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003926:	4b03      	ldr	r3, [pc, #12]	; (8003934 <pvTaskIncrementMutexHeldCount+0x24>)
 8003928:	681b      	ldr	r3, [r3, #0]
	}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000350 	.word	0x20000350

08003938 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003942:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003948:	4b28      	ldr	r3, [pc, #160]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3304      	adds	r3, #4
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fa14 	bl	8001d7c <uxListRemove>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	2201      	movs	r2, #1
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4013      	ands	r3, r2
 800396e:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003970:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003978:	d10a      	bne.n	8003990 <prvAddCurrentTaskToDelayedList+0x58>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3304      	adds	r3, #4
 8003986:	4619      	mov	r1, r3
 8003988:	481a      	ldr	r0, [pc, #104]	; (80039f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800398a:	f7fe f99c 	bl	8001cc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800398e:	e026      	b.n	80039de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d209      	bcs.n	80039bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fe f9a9 	bl	8001d0c <vListInsert>
}
 80039ba:	e010      	b.n	80039de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f7fe f99f 	bl	8001d0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d202      	bcs.n	80039de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80039d8:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6013      	str	r3, [r2, #0]
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000454 	.word	0x20000454
 80039ec:	20000350 	.word	0x20000350
 80039f0:	20000458 	.word	0x20000458
 80039f4:	2000043c 	.word	0x2000043c
 80039f8:	2000040c 	.word	0x2000040c
 80039fc:	20000408 	.word	0x20000408
 8003a00:	20000470 	.word	0x20000470

08003a04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3b04      	subs	r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3b04      	subs	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f023 0201 	bic.w	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3b04      	subs	r3, #4
 8003a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <pxPortInitialiseStack+0x54>)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3b14      	subs	r3, #20
 8003a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3b20      	subs	r3, #32
 8003a4a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	08003a5d 	.word	0x08003a5d

08003a5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <prvTaskExitError+0x54>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6e:	d00a      	beq.n	8003a86 <prvTaskExitError+0x2a>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	60fb      	str	r3, [r7, #12]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <prvTaskExitError+0x28>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	60bb      	str	r3, [r7, #8]
}
 8003a98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a9a:	bf00      	nop
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0fc      	beq.n	8003a9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000018 	.word	0x20000018
	...

08003ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <pxCurrentTCBConst2>)
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	6808      	ldr	r0, [r1, #0]
 8003ac6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003aca:	f380 8809 	msr	PSP, r0
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f380 8811 	msr	BASEPRI, r0
 8003ada:	f04e 0e0d 	orr.w	lr, lr, #13
 8003ade:	4770      	bx	lr

08003ae0 <pxCurrentTCBConst2>:
 8003ae0:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop

08003ae8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ae8:	4806      	ldr	r0, [pc, #24]	; (8003b04 <prvPortStartFirstTask+0x1c>)
 8003aea:	6800      	ldr	r0, [r0, #0]
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	f380 8808 	msr	MSP, r0
 8003af2:	b662      	cpsie	i
 8003af4:	b661      	cpsie	f
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	df00      	svc	0
 8003b00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b02:	bf00      	nop
 8003b04:	e000ed08 	.word	0xe000ed08

08003b08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b0e:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <xPortStartScheduler+0xd0>)
 8003b10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	22ff      	movs	r2, #255	; 0xff
 8003b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <xPortStartScheduler+0xd4>)
 8003b34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b36:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <xPortStartScheduler+0xd8>)
 8003b38:	2207      	movs	r2, #7
 8003b3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b3c:	e009      	b.n	8003b52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <xPortStartScheduler+0xd8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	4a26      	ldr	r2, [pc, #152]	; (8003be0 <xPortStartScheduler+0xd8>)
 8003b46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b80      	cmp	r3, #128	; 0x80
 8003b5c:	d0ef      	beq.n	8003b3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <xPortStartScheduler+0xd8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1c3 0307 	rsb	r3, r3, #7
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d00a      	beq.n	8003b80 <xPortStartScheduler+0x78>
	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	60bb      	str	r3, [r7, #8]
}
 8003b7c:	bf00      	nop
 8003b7e:	e7fe      	b.n	8003b7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b80:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <xPortStartScheduler+0xd8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <xPortStartScheduler+0xd8>)
 8003b88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <xPortStartScheduler+0xd8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b92:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <xPortStartScheduler+0xd8>)
 8003b94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <xPortStartScheduler+0xdc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a10      	ldr	r2, [pc, #64]	; (8003be4 <xPortStartScheduler+0xdc>)
 8003ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <xPortStartScheduler+0xdc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a0d      	ldr	r2, [pc, #52]	; (8003be4 <xPortStartScheduler+0xdc>)
 8003bb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003bb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003bb6:	f000 f8b9 	bl	8003d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <xPortStartScheduler+0xe0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003bc0:	f7ff ff92 	bl	8003ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003bc4:	f7ff fa90 	bl	80030e8 <vTaskSwitchContext>
	prvTaskExitError();
 8003bc8:	f7ff ff48 	bl	8003a5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	e000e400 	.word	0xe000e400
 8003bdc:	2000047c 	.word	0x2000047c
 8003be0:	20000480 	.word	0x20000480
 8003be4:	e000ed20 	.word	0xe000ed20
 8003be8:	20000018 	.word	0x20000018

08003bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	607b      	str	r3, [r7, #4]
}
 8003c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <vPortEnterCritical+0x58>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	4a0d      	ldr	r2, [pc, #52]	; (8003c44 <vPortEnterCritical+0x58>)
 8003c0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <vPortEnterCritical+0x58>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10f      	bne.n	8003c38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <vPortEnterCritical+0x5c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <vPortEnterCritical+0x4c>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	603b      	str	r3, [r7, #0]
}
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <vPortEnterCritical+0x4a>
	}
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000018 	.word	0x20000018
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <vPortExitCritical+0x4c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <vPortExitCritical+0x24>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	607b      	str	r3, [r7, #4]
}
 8003c6c:	bf00      	nop
 8003c6e:	e7fe      	b.n	8003c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <vPortExitCritical+0x4c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <vPortExitCritical+0x4c>)
 8003c78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c7a:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <vPortExitCritical+0x4c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <vPortExitCritical+0x42>
 8003c82:	2300      	movs	r3, #0
 8003c84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	f383 8811 	msr	BASEPRI, r3
}
 8003c8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	20000018 	.word	0x20000018
 8003c9c:	00000000 	.word	0x00000000

08003ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ca0:	f3ef 8009 	mrs	r0, PSP
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <pxCurrentTCBConst>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cb0:	6010      	str	r0, [r2, #0]
 8003cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003cb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003cba:	f380 8811 	msr	BASEPRI, r0
 8003cbe:	f7ff fa13 	bl	80030e8 <vTaskSwitchContext>
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f380 8811 	msr	BASEPRI, r0
 8003cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003cce:	6819      	ldr	r1, [r3, #0]
 8003cd0:	6808      	ldr	r0, [r1, #0]
 8003cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cd6:	f380 8809 	msr	PSP, r0
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	4770      	bx	lr

08003ce0 <pxCurrentTCBConst>:
 8003ce0:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop

08003ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	607b      	str	r3, [r7, #4]
}
 8003d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d02:	f7ff f933 	bl	8002f6c <xTaskIncrementTick>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <SysTick_Handler+0x40>)
 8003d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	2300      	movs	r3, #0
 8003d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	f383 8811 	msr	BASEPRI, r3
}
 8003d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <vPortSetupTimerInterrupt+0x30>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <vPortSetupTimerInterrupt+0x34>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d3c:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <vPortSetupTimerInterrupt+0x38>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <vPortSetupTimerInterrupt+0x3c>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	099b      	lsrs	r3, r3, #6
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <vPortSetupTimerInterrupt+0x40>)
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d4e:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <vPortSetupTimerInterrupt+0x30>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	e000e010 	.word	0xe000e010
 8003d60:	e000e018 	.word	0xe000e018
 8003d64:	20000010 	.word	0x20000010
 8003d68:	10624dd3 	.word	0x10624dd3
 8003d6c:	e000e014 	.word	0xe000e014

08003d70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003d76:	f3ef 8305 	mrs	r3, IPSR
 8003d7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	d904      	bls.n	8003d8c <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <vPortValidateInterruptPriority+0x4c>)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	72fb      	strb	r3, [r7, #11]
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <vPortValidateInterruptPriority+0x50>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <vPortValidateInterruptPriority+0x54>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d90a      	bls.n	8003db2 <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	607b      	str	r3, [r7, #4]
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <vPortValidateInterruptPriority+0x40>
	}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	e000e3f0 	.word	0xe000e3f0
 8003dc0:	e000ed0c 	.word	0xe000ed0c
 8003dc4:	20000480 	.word	0x20000480

08003dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003dd4:	f7ff f820 	bl	8002e18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003dd8:	4b58      	ldr	r3, [pc, #352]	; (8003f3c <pvPortMalloc+0x174>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003de0:	f000 f910 	bl	8004004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003de4:	4b56      	ldr	r3, [pc, #344]	; (8003f40 <pvPortMalloc+0x178>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 808e 	bne.w	8003f0e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01d      	beq.n	8003e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003df8:	2208      	movs	r2, #8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d014      	beq.n	8003e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f023 0307 	bic.w	r3, r3, #7
 8003e10:	3308      	adds	r3, #8
 8003e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <pvPortMalloc+0x6c>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	617b      	str	r3, [r7, #20]
}
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d069      	beq.n	8003f0e <pvPortMalloc+0x146>
 8003e3a:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <pvPortMalloc+0x17c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d864      	bhi.n	8003f0e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e44:	4b40      	ldr	r3, [pc, #256]	; (8003f48 <pvPortMalloc+0x180>)
 8003e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e48:	4b3f      	ldr	r3, [pc, #252]	; (8003f48 <pvPortMalloc+0x180>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e4e:	e004      	b.n	8003e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d903      	bls.n	8003e6c <pvPortMalloc+0xa4>
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f1      	bne.n	8003e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e6c:	4b33      	ldr	r3, [pc, #204]	; (8003f3c <pvPortMalloc+0x174>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d04b      	beq.n	8003f0e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	4413      	add	r3, r2
 8003e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	1ad2      	subs	r2, r2, r3
 8003e90:	2308      	movs	r3, #8
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d91f      	bls.n	8003ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	613b      	str	r3, [r7, #16]
}
 8003ebc:	bf00      	nop
 8003ebe:	e7fe      	b.n	8003ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	1ad2      	subs	r2, r2, r3
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ed2:	69b8      	ldr	r0, [r7, #24]
 8003ed4:	f000 f8f8 	bl	80040c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <pvPortMalloc+0x17c>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <pvPortMalloc+0x17c>)
 8003ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ee6:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <pvPortMalloc+0x17c>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <pvPortMalloc+0x184>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d203      	bcs.n	8003efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <pvPortMalloc+0x17c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <pvPortMalloc+0x184>)
 8003ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <pvPortMalloc+0x178>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f0e:	f7fe ff91 	bl	8002e34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <pvPortMalloc+0x16a>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	60fb      	str	r3, [r7, #12]
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <pvPortMalloc+0x168>
	return pvReturn;
 8003f32:	69fb      	ldr	r3, [r7, #28]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3728      	adds	r7, #40	; 0x28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	2000108c 	.word	0x2000108c
 8003f40:	20001098 	.word	0x20001098
 8003f44:	20001090 	.word	0x20001090
 8003f48:	20001084 	.word	0x20001084
 8003f4c:	20001094 	.word	0x20001094

08003f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d048      	beq.n	8003ff4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f62:	2308      	movs	r3, #8
 8003f64:	425b      	negs	r3, r3
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4413      	add	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <vPortFree+0xac>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <vPortFree+0x44>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	60fb      	str	r3, [r7, #12]
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <vPortFree+0x62>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	60bb      	str	r3, [r7, #8]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <vPortFree+0xac>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d019      	beq.n	8003ff4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d115      	bne.n	8003ff4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <vPortFree+0xac>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003fd8:	f7fe ff1e 	bl	8002e18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	4b07      	ldr	r3, [pc, #28]	; (8004000 <vPortFree+0xb0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4a06      	ldr	r2, [pc, #24]	; (8004000 <vPortFree+0xb0>)
 8003fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fea:	6938      	ldr	r0, [r7, #16]
 8003fec:	f000 f86c 	bl	80040c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003ff0:	f7fe ff20 	bl	8002e34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ff4:	bf00      	nop
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20001098 	.word	0x20001098
 8004000:	20001090 	.word	0x20001090

08004004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800400a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800400e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004010:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <prvHeapInit+0xac>)
 8004012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00c      	beq.n	8004038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3307      	adds	r3, #7
 8004022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0307 	bic.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	4a1f      	ldr	r2, [pc, #124]	; (80040b0 <prvHeapInit+0xac>)
 8004034:	4413      	add	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800403c:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <prvHeapInit+0xb0>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004042:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <prvHeapInit+0xb0>)
 8004044:	2200      	movs	r2, #0
 8004046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	4413      	add	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004050:	2208      	movs	r2, #8
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <prvHeapInit+0xb4>)
 8004064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <prvHeapInit+0xb4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2200      	movs	r2, #0
 800406c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <prvHeapInit+0xb4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	1ad2      	subs	r2, r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <prvHeapInit+0xb4>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <prvHeapInit+0xb8>)
 8004092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <prvHeapInit+0xbc>)
 800409a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <prvHeapInit+0xc0>)
 800409e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040a2:	601a      	str	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000484 	.word	0x20000484
 80040b4:	20001084 	.word	0x20001084
 80040b8:	2000108c 	.word	0x2000108c
 80040bc:	20001094 	.word	0x20001094
 80040c0:	20001090 	.word	0x20001090
 80040c4:	20001098 	.word	0x20001098

080040c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <prvInsertBlockIntoFreeList+0xa8>)
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e002      	b.n	80040dc <prvInsertBlockIntoFreeList+0x14>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d8f7      	bhi.n	80040d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	4413      	add	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d108      	bne.n	800410a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	441a      	add	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	441a      	add	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d118      	bne.n	8004150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <prvInsertBlockIntoFreeList+0xac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d00d      	beq.n	8004146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e008      	b.n	8004158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <prvInsertBlockIntoFreeList+0xac>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e003      	b.n	8004158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	429a      	cmp	r2, r3
 800415e:	d002      	beq.n	8004166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	20001084 	.word	0x20001084
 8004174:	2000108c 	.word	0x2000108c

08004178 <__libc_init_array>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	2600      	movs	r6, #0
 800417c:	4d0c      	ldr	r5, [pc, #48]	; (80041b0 <__libc_init_array+0x38>)
 800417e:	4c0d      	ldr	r4, [pc, #52]	; (80041b4 <__libc_init_array+0x3c>)
 8004180:	1b64      	subs	r4, r4, r5
 8004182:	10a4      	asrs	r4, r4, #2
 8004184:	42a6      	cmp	r6, r4
 8004186:	d109      	bne.n	800419c <__libc_init_array+0x24>
 8004188:	f000 f90c 	bl	80043a4 <_init>
 800418c:	2600      	movs	r6, #0
 800418e:	4d0a      	ldr	r5, [pc, #40]	; (80041b8 <__libc_init_array+0x40>)
 8004190:	4c0a      	ldr	r4, [pc, #40]	; (80041bc <__libc_init_array+0x44>)
 8004192:	1b64      	subs	r4, r4, r5
 8004194:	10a4      	asrs	r4, r4, #2
 8004196:	42a6      	cmp	r6, r4
 8004198:	d105      	bne.n	80041a6 <__libc_init_array+0x2e>
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a0:	4798      	blx	r3
 80041a2:	3601      	adds	r6, #1
 80041a4:	e7ee      	b.n	8004184 <__libc_init_array+0xc>
 80041a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041aa:	4798      	blx	r3
 80041ac:	3601      	adds	r6, #1
 80041ae:	e7f2      	b.n	8004196 <__libc_init_array+0x1e>
 80041b0:	08004518 	.word	0x08004518
 80041b4:	08004518 	.word	0x08004518
 80041b8:	08004518 	.word	0x08004518
 80041bc:	0800451c 	.word	0x0800451c

080041c0 <__retarget_lock_acquire_recursive>:
 80041c0:	4770      	bx	lr

080041c2 <__retarget_lock_release_recursive>:
 80041c2:	4770      	bx	lr

080041c4 <memcpy>:
 80041c4:	440a      	add	r2, r1
 80041c6:	4291      	cmp	r1, r2
 80041c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80041cc:	d100      	bne.n	80041d0 <memcpy+0xc>
 80041ce:	4770      	bx	lr
 80041d0:	b510      	push	{r4, lr}
 80041d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d6:	4291      	cmp	r1, r2
 80041d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041dc:	d1f9      	bne.n	80041d2 <memcpy+0xe>
 80041de:	bd10      	pop	{r4, pc}

080041e0 <memset>:
 80041e0:	4603      	mov	r3, r0
 80041e2:	4402      	add	r2, r0
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d100      	bne.n	80041ea <memset+0xa>
 80041e8:	4770      	bx	lr
 80041ea:	f803 1b01 	strb.w	r1, [r3], #1
 80041ee:	e7f9      	b.n	80041e4 <memset+0x4>

080041f0 <cleanup_glue>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	460c      	mov	r4, r1
 80041f4:	6809      	ldr	r1, [r1, #0]
 80041f6:	4605      	mov	r5, r0
 80041f8:	b109      	cbz	r1, 80041fe <cleanup_glue+0xe>
 80041fa:	f7ff fff9 	bl	80041f0 <cleanup_glue>
 80041fe:	4621      	mov	r1, r4
 8004200:	4628      	mov	r0, r5
 8004202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004206:	f000 b881 	b.w	800430c <_free_r>
	...

0800420c <_reclaim_reent>:
 800420c:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <_reclaim_reent+0xb4>)
 800420e:	b570      	push	{r4, r5, r6, lr}
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4604      	mov	r4, r0
 8004214:	4283      	cmp	r3, r0
 8004216:	d051      	beq.n	80042bc <_reclaim_reent+0xb0>
 8004218:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800421a:	b143      	cbz	r3, 800422e <_reclaim_reent+0x22>
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d14a      	bne.n	80042b8 <_reclaim_reent+0xac>
 8004222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004224:	6819      	ldr	r1, [r3, #0]
 8004226:	b111      	cbz	r1, 800422e <_reclaim_reent+0x22>
 8004228:	4620      	mov	r0, r4
 800422a:	f000 f86f 	bl	800430c <_free_r>
 800422e:	6961      	ldr	r1, [r4, #20]
 8004230:	b111      	cbz	r1, 8004238 <_reclaim_reent+0x2c>
 8004232:	4620      	mov	r0, r4
 8004234:	f000 f86a 	bl	800430c <_free_r>
 8004238:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800423a:	b111      	cbz	r1, 8004242 <_reclaim_reent+0x36>
 800423c:	4620      	mov	r0, r4
 800423e:	f000 f865 	bl	800430c <_free_r>
 8004242:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004244:	b111      	cbz	r1, 800424c <_reclaim_reent+0x40>
 8004246:	4620      	mov	r0, r4
 8004248:	f000 f860 	bl	800430c <_free_r>
 800424c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800424e:	b111      	cbz	r1, 8004256 <_reclaim_reent+0x4a>
 8004250:	4620      	mov	r0, r4
 8004252:	f000 f85b 	bl	800430c <_free_r>
 8004256:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004258:	b111      	cbz	r1, 8004260 <_reclaim_reent+0x54>
 800425a:	4620      	mov	r0, r4
 800425c:	f000 f856 	bl	800430c <_free_r>
 8004260:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004262:	b111      	cbz	r1, 800426a <_reclaim_reent+0x5e>
 8004264:	4620      	mov	r0, r4
 8004266:	f000 f851 	bl	800430c <_free_r>
 800426a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800426c:	b111      	cbz	r1, 8004274 <_reclaim_reent+0x68>
 800426e:	4620      	mov	r0, r4
 8004270:	f000 f84c 	bl	800430c <_free_r>
 8004274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004276:	b111      	cbz	r1, 800427e <_reclaim_reent+0x72>
 8004278:	4620      	mov	r0, r4
 800427a:	f000 f847 	bl	800430c <_free_r>
 800427e:	69a3      	ldr	r3, [r4, #24]
 8004280:	b1e3      	cbz	r3, 80042bc <_reclaim_reent+0xb0>
 8004282:	4620      	mov	r0, r4
 8004284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004286:	4798      	blx	r3
 8004288:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800428a:	b1b9      	cbz	r1, 80042bc <_reclaim_reent+0xb0>
 800428c:	4620      	mov	r0, r4
 800428e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004292:	f7ff bfad 	b.w	80041f0 <cleanup_glue>
 8004296:	5949      	ldr	r1, [r1, r5]
 8004298:	b941      	cbnz	r1, 80042ac <_reclaim_reent+0xa0>
 800429a:	3504      	adds	r5, #4
 800429c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800429e:	2d80      	cmp	r5, #128	; 0x80
 80042a0:	68d9      	ldr	r1, [r3, #12]
 80042a2:	d1f8      	bne.n	8004296 <_reclaim_reent+0x8a>
 80042a4:	4620      	mov	r0, r4
 80042a6:	f000 f831 	bl	800430c <_free_r>
 80042aa:	e7ba      	b.n	8004222 <_reclaim_reent+0x16>
 80042ac:	680e      	ldr	r6, [r1, #0]
 80042ae:	4620      	mov	r0, r4
 80042b0:	f000 f82c 	bl	800430c <_free_r>
 80042b4:	4631      	mov	r1, r6
 80042b6:	e7ef      	b.n	8004298 <_reclaim_reent+0x8c>
 80042b8:	2500      	movs	r5, #0
 80042ba:	e7ef      	b.n	800429c <_reclaim_reent+0x90>
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	bf00      	nop
 80042c0:	2000001c 	.word	0x2000001c

080042c4 <strstr>:
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	780c      	ldrb	r4, [r1, #0]
 80042c8:	b164      	cbz	r4, 80042e4 <strstr+0x20>
 80042ca:	4603      	mov	r3, r0
 80042cc:	781a      	ldrb	r2, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	1c5e      	adds	r6, r3, #1
 80042d2:	b90a      	cbnz	r2, 80042d8 <strstr+0x14>
 80042d4:	4610      	mov	r0, r2
 80042d6:	e005      	b.n	80042e4 <strstr+0x20>
 80042d8:	4294      	cmp	r4, r2
 80042da:	d108      	bne.n	80042ee <strstr+0x2a>
 80042dc:	460d      	mov	r5, r1
 80042de:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80042e2:	b902      	cbnz	r2, 80042e6 <strstr+0x22>
 80042e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042e6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80042ea:	4297      	cmp	r7, r2
 80042ec:	d0f7      	beq.n	80042de <strstr+0x1a>
 80042ee:	4633      	mov	r3, r6
 80042f0:	e7ec      	b.n	80042cc <strstr+0x8>
	...

080042f4 <__malloc_lock>:
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <__malloc_lock+0x8>)
 80042f6:	f7ff bf63 	b.w	80041c0 <__retarget_lock_acquire_recursive>
 80042fa:	bf00      	nop
 80042fc:	2000128c 	.word	0x2000128c

08004300 <__malloc_unlock>:
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <__malloc_unlock+0x8>)
 8004302:	f7ff bf5e 	b.w	80041c2 <__retarget_lock_release_recursive>
 8004306:	bf00      	nop
 8004308:	2000128c 	.word	0x2000128c

0800430c <_free_r>:
 800430c:	b538      	push	{r3, r4, r5, lr}
 800430e:	4605      	mov	r5, r0
 8004310:	2900      	cmp	r1, #0
 8004312:	d043      	beq.n	800439c <_free_r+0x90>
 8004314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004318:	1f0c      	subs	r4, r1, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	bfb8      	it	lt
 800431e:	18e4      	addlt	r4, r4, r3
 8004320:	f7ff ffe8 	bl	80042f4 <__malloc_lock>
 8004324:	4a1e      	ldr	r2, [pc, #120]	; (80043a0 <_free_r+0x94>)
 8004326:	6813      	ldr	r3, [r2, #0]
 8004328:	4610      	mov	r0, r2
 800432a:	b933      	cbnz	r3, 800433a <_free_r+0x2e>
 800432c:	6063      	str	r3, [r4, #4]
 800432e:	6014      	str	r4, [r2, #0]
 8004330:	4628      	mov	r0, r5
 8004332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004336:	f7ff bfe3 	b.w	8004300 <__malloc_unlock>
 800433a:	42a3      	cmp	r3, r4
 800433c:	d90a      	bls.n	8004354 <_free_r+0x48>
 800433e:	6821      	ldr	r1, [r4, #0]
 8004340:	1862      	adds	r2, r4, r1
 8004342:	4293      	cmp	r3, r2
 8004344:	bf01      	itttt	eq
 8004346:	681a      	ldreq	r2, [r3, #0]
 8004348:	685b      	ldreq	r3, [r3, #4]
 800434a:	1852      	addeq	r2, r2, r1
 800434c:	6022      	streq	r2, [r4, #0]
 800434e:	6063      	str	r3, [r4, #4]
 8004350:	6004      	str	r4, [r0, #0]
 8004352:	e7ed      	b.n	8004330 <_free_r+0x24>
 8004354:	461a      	mov	r2, r3
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	b10b      	cbz	r3, 800435e <_free_r+0x52>
 800435a:	42a3      	cmp	r3, r4
 800435c:	d9fa      	bls.n	8004354 <_free_r+0x48>
 800435e:	6811      	ldr	r1, [r2, #0]
 8004360:	1850      	adds	r0, r2, r1
 8004362:	42a0      	cmp	r0, r4
 8004364:	d10b      	bne.n	800437e <_free_r+0x72>
 8004366:	6820      	ldr	r0, [r4, #0]
 8004368:	4401      	add	r1, r0
 800436a:	1850      	adds	r0, r2, r1
 800436c:	4283      	cmp	r3, r0
 800436e:	6011      	str	r1, [r2, #0]
 8004370:	d1de      	bne.n	8004330 <_free_r+0x24>
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4401      	add	r1, r0
 8004378:	6011      	str	r1, [r2, #0]
 800437a:	6053      	str	r3, [r2, #4]
 800437c:	e7d8      	b.n	8004330 <_free_r+0x24>
 800437e:	d902      	bls.n	8004386 <_free_r+0x7a>
 8004380:	230c      	movs	r3, #12
 8004382:	602b      	str	r3, [r5, #0]
 8004384:	e7d4      	b.n	8004330 <_free_r+0x24>
 8004386:	6820      	ldr	r0, [r4, #0]
 8004388:	1821      	adds	r1, r4, r0
 800438a:	428b      	cmp	r3, r1
 800438c:	bf01      	itttt	eq
 800438e:	6819      	ldreq	r1, [r3, #0]
 8004390:	685b      	ldreq	r3, [r3, #4]
 8004392:	1809      	addeq	r1, r1, r0
 8004394:	6021      	streq	r1, [r4, #0]
 8004396:	6063      	str	r3, [r4, #4]
 8004398:	6054      	str	r4, [r2, #4]
 800439a:	e7c9      	b.n	8004330 <_free_r+0x24>
 800439c:	bd38      	pop	{r3, r4, r5, pc}
 800439e:	bf00      	nop
 80043a0:	2000109c 	.word	0x2000109c

080043a4 <_init>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	bf00      	nop
 80043a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043aa:	bc08      	pop	{r3}
 80043ac:	469e      	mov	lr, r3
 80043ae:	4770      	bx	lr

080043b0 <_fini>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	bf00      	nop
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr
