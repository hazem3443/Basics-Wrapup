
CRC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000032c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000448  08000448  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000448  08000448  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000448  08000448  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800044c  0800044c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000454  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000454  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000181a  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000627  00000000  00000000  00021847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00021e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  00021f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e3d  00000000  00000000  00022048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c79  00000000  00000000  00022e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e053  00000000  00000000  00024afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a2b51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000280  00000000  00000000  000a2ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000420 	.word	0x08000420

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000420 	.word	0x08000420

0800014c <CRC_init>:
 *      Author: root
 */
#include "stm32f1xx_hal.h"
#include <stdlib.h>

void CRC_init(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

 RCC->AHBENR |= RCC_AHBENR_CRCEN;  // enable clock for CRC
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <CRC_init+0x24>)
 8000152:	695b      	ldr	r3, [r3, #20]
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <CRC_init+0x24>)
 8000156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800015a:	6153      	str	r3, [r2, #20]
 CRC->CR |= CRC_CR_RESET;   // Reset calculation
 800015c:	4b05      	ldr	r3, [pc, #20]	; (8000174 <CRC_init+0x28>)
 800015e:	689b      	ldr	r3, [r3, #8]
 8000160:	4a04      	ldr	r2, [pc, #16]	; (8000174 <CRC_init+0x28>)
 8000162:	f043 0301 	orr.w	r3, r3, #1
 8000166:	6093      	str	r3, [r2, #8]

}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	40021000 	.word	0x40021000
 8000174:	40023000 	.word	0x40023000

08000178 <CRC_Send_32>:

//this function takes int or char and returns the CRC value of it
uint32_t CRC_Send_32(uint32_t data){
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	CRC->CR = CRC_CR_RESET;
 8000180:	4b06      	ldr	r3, [pc, #24]	; (800019c <CRC_Send_32+0x24>)
 8000182:	2201      	movs	r2, #1
 8000184:	609a      	str	r2, [r3, #8]
	CRC->DR = data;
 8000186:	4a05      	ldr	r2, [pc, #20]	; (800019c <CRC_Send_32+0x24>)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	6013      	str	r3, [r2, #0]
	return CRC->DR;
 800018c:	4b03      	ldr	r3, [pc, #12]	; (800019c <CRC_Send_32+0x24>)
 800018e:	681b      	ldr	r3, [r3, #0]
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	40023000 	.word	0x40023000

080001a0 <CRC_Send_Stream_32>:

//this function takes Data Stream as pointer to it, it's size and returns it's CRC Value
uint32_t CRC_Send_Stream_32(uint32_t *data, size_t len){
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	6039      	str	r1, [r7, #0]
	CRC->CR = CRC_CR_RESET;
 80001aa:	4b0d      	ldr	r3, [pc, #52]	; (80001e0 <CRC_Send_Stream_32+0x40>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < len; i++) {
 80001b0:	2300      	movs	r3, #0
 80001b2:	60fb      	str	r3, [r7, #12]
 80001b4:	e009      	b.n	80001ca <CRC_Send_Stream_32+0x2a>
		CRC->DR = data[i];
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	687a      	ldr	r2, [r7, #4]
 80001bc:	4413      	add	r3, r2
 80001be:	4a08      	ldr	r2, [pc, #32]	; (80001e0 <CRC_Send_Stream_32+0x40>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < len; i++) {
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	3301      	adds	r3, #1
 80001c8:	60fb      	str	r3, [r7, #12]
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	683a      	ldr	r2, [r7, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d8f1      	bhi.n	80001b6 <CRC_Send_Stream_32+0x16>
	}
	return CRC->DR;
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <CRC_Send_Stream_32+0x40>)
 80001d4:	681b      	ldr	r3, [r3, #0]
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3714      	adds	r7, #20
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	40023000 	.word	0x40023000

080001e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	6039      	str	r1, [r7, #0]
 80001ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	db0a      	blt.n	800020e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	490c      	ldr	r1, [pc, #48]	; (8000230 <__NVIC_SetPriority+0x4c>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	0112      	lsls	r2, r2, #4
 8000204:	b2d2      	uxtb	r2, r2
 8000206:	440b      	add	r3, r1
 8000208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800020c:	e00a      	b.n	8000224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	b2da      	uxtb	r2, r3
 8000212:	4908      	ldr	r1, [pc, #32]	; (8000234 <__NVIC_SetPriority+0x50>)
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	f003 030f 	and.w	r3, r3, #15
 800021a:	3b04      	subs	r3, #4
 800021c:	0112      	lsls	r2, r2, #4
 800021e:	b2d2      	uxtb	r2, r2
 8000220:	440b      	add	r3, r1
 8000222:	761a      	strb	r2, [r3, #24]
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000e100 	.word	0xe000e100
 8000234:	e000ed00 	.word	0xe000ed00

08000238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3b01      	subs	r3, #1
 8000244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000248:	d301      	bcc.n	800024e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800024a:	2301      	movs	r3, #1
 800024c:	e00f      	b.n	800026e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <SysTick_Config+0x40>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3b01      	subs	r3, #1
 8000254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000256:	210f      	movs	r1, #15
 8000258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800025c:	f7ff ffc2 	bl	80001e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <SysTick_Config+0x40>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000266:	4b04      	ldr	r3, [pc, #16]	; (8000278 <SysTick_Config+0x40>)
 8000268:	2207      	movs	r2, #7
 800026a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800026c:	2300      	movs	r3, #0
}
 800026e:	4618      	mov	r0, r3
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	e000e010 	.word	0xe000e010

0800027c <main>:
#include "stm32f1xx_hal.h"

#include "CRC.h"

int main (void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b08f      	sub	sp, #60	; 0x3c
 8000280:	af00      	add	r7, sp, #0
	//****************************| NON CRC CODE |*********************
	SysTick_Config(SystemCoreClock / 1000);
 8000282:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <main+0xb4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a2b      	ldr	r2, [pc, #172]	; (8000334 <main+0xb8>)
 8000288:	fba2 2303 	umull	r2, r3, r2, r3
 800028c:	099b      	lsrs	r3, r3, #6
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ffd2 	bl	8000238 <SysTick_Config>
	//*****************************************************************

	CRC_init();//enable CRCon AHB bus
 8000294:	f7ff ff5a 	bl	800014c <CRC_init>

	uint32_t dummy_byte = 0x000000C1;
 8000298:	23c1      	movs	r3, #193	; 0xc1
 800029a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t dummy_Stream[] = { 0x41, 0x20, 0xff, 0x10 };
 800029c:	4b26      	ldr	r3, [pc, #152]	; (8000338 <main+0xbc>)
 800029e:	f107 041c 	add.w	r4, r7, #28
 80002a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	while(1)
	{

		int CRC_code = CRC_Send_32(dummy_byte);
 80002a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80002aa:	f7ff ff65 	bl	8000178 <CRC_Send_32>
 80002ae:	4603      	mov	r3, r0
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		uint32_t RX1[] = {dummy_byte, CRC_code};
 80002b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002b8:	61bb      	str	r3, [r7, #24]
		CRC_code = CRC_Send_Stream_32(RX1, sizeof(RX1)/sizeof(int)); //must be zero
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	2102      	movs	r1, #2
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ff6d 	bl	80001a0 <CRC_Send_Stream_32>
 80002c6:	4603      	mov	r3, r0
 80002c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		CRC_code = CRC_Send_Stream_32(dummy_Stream, sizeof(dummy_Stream)/sizeof(int));
 80002ca:	f107 031c 	add.w	r3, r7, #28
 80002ce:	2104      	movs	r1, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff65 	bl	80001a0 <CRC_Send_Stream_32>
 80002d6:	4603      	mov	r3, r0
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		uint32_t RX2[ (sizeof(dummy_Stream)/sizeof(int))+1 ];

		int i;
		for(i=0; i < ((sizeof(dummy_Stream)/sizeof(int))) ;++i)
 80002da:	2300      	movs	r3, #0
 80002dc:	637b      	str	r3, [r7, #52]	; 0x34
 80002de:	e010      	b.n	8000302 <main+0x86>
			RX2[i] = dummy_Stream[i];
 80002e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80002e8:	4413      	add	r3, r2
 80002ea:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80002ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80002f6:	440b      	add	r3, r1
 80002f8:	f843 2c38 	str.w	r2, [r3, #-56]
		for(i=0; i < ((sizeof(dummy_Stream)/sizeof(int))) ;++i)
 80002fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002fe:	3301      	adds	r3, #1
 8000300:	637b      	str	r3, [r7, #52]	; 0x34
 8000302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000304:	2b03      	cmp	r3, #3
 8000306:	d9eb      	bls.n	80002e0 <main+0x64>

		RX2[i++] = CRC_code;
 8000308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	637a      	str	r2, [r7, #52]	; 0x34
 800030e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000316:	440b      	add	r3, r1
 8000318:	f843 2c38 	str.w	r2, [r3, #-56]

		CRC_code = CRC_Send_Stream_32(RX2, i);//must be zero
 800031c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800031e:	463b      	mov	r3, r7
 8000320:	4611      	mov	r1, r2
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff3c 	bl	80001a0 <CRC_Send_Stream_32>
 8000328:	4603      	mov	r3, r0
 800032a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
 800032c:	e7bc      	b.n	80002a8 <main+0x2c>
 800032e:	bf00      	nop
 8000330:	20000000 	.word	0x20000000
 8000334:	10624dd3 	.word	0x10624dd3
 8000338:	08000438 	.word	0x08000438

0800033c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <NMI_Handler+0x4>

08000342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <HardFault_Handler+0x4>

08000348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <MemManage_Handler+0x4>

0800034e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <BusFault_Handler+0x4>

08000354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <UsageFault_Handler+0x4>

0800035a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr

08000366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr

08000372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr

0800037e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000382:	bf00      	nop
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
	...

0800038c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800038e:	490d      	ldr	r1, [pc, #52]	; (80003c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000390:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000394:	e002      	b.n	800039c <LoopCopyDataInit>

08000396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039a:	3304      	adds	r3, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800039c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a0:	d3f9      	bcc.n	8000396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a8:	e001      	b.n	80003ae <LoopFillZerobss>

080003aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ac:	3204      	adds	r2, #4

080003ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b0:	d3fb      	bcc.n	80003aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003b2:	f7ff ffe4 	bl	800037e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003b6:	f000 f80f 	bl	80003d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff5f 	bl	800027c <main>
  bx lr
 80003be:	4770      	bx	lr
  ldr r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003c8:	08000450 	.word	0x08000450
  ldr r2, =_sbss
 80003cc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003d0:	20000020 	.word	0x20000020

080003d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC1_2_IRQHandler>
	...

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	2600      	movs	r6, #0
 80003dc:	4d0c      	ldr	r5, [pc, #48]	; (8000410 <__libc_init_array+0x38>)
 80003de:	4c0d      	ldr	r4, [pc, #52]	; (8000414 <__libc_init_array+0x3c>)
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	10a4      	asrs	r4, r4, #2
 80003e4:	42a6      	cmp	r6, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	f000 f81a 	bl	8000420 <_init>
 80003ec:	2600      	movs	r6, #0
 80003ee:	4d0a      	ldr	r5, [pc, #40]	; (8000418 <__libc_init_array+0x40>)
 80003f0:	4c0a      	ldr	r4, [pc, #40]	; (800041c <__libc_init_array+0x44>)
 80003f2:	1b64      	subs	r4, r4, r5
 80003f4:	10a4      	asrs	r4, r4, #2
 80003f6:	42a6      	cmp	r6, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000400:	4798      	blx	r3
 8000402:	3601      	adds	r6, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f855 3b04 	ldr.w	r3, [r5], #4
 800040a:	4798      	blx	r3
 800040c:	3601      	adds	r6, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	08000448 	.word	0x08000448
 8000414:	08000448 	.word	0x08000448
 8000418:	08000448 	.word	0x08000448
 800041c:	0800044c 	.word	0x0800044c

08000420 <_init>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr

0800042c <_fini>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr
