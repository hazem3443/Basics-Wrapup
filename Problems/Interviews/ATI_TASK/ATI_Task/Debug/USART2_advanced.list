
USART2_advanced.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001658  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08001768  08001768  00011768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800184c  0800184c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800184c  0800184c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800184c  0800184c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800184c  0800184c  0001184c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001850  08001850  00011850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000024  08001878  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08001878  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000262c  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a4b  00000000  00000000  00022679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  000230c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  000232d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ff0  00000000  00000000  00023470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a69  00000000  00000000  00024460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e40a  00000000  00000000  00026ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a52d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000083c  00000000  00000000  000a5328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000024 	.word	0x20000024
 800012c:	00000000 	.word	0x00000000
 8000130:	08001750 	.word	0x08001750

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000028 	.word	0x20000028
 800014c:	08001750 	.word	0x08001750

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db0b      	blt.n	8000a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	4906      	ldr	r1, [pc, #24]	; (8000a70 <__NVIC_EnableIRQ+0x34>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <UART_Init>:

#include "stm32f1xx_hal.h"
#include "gp_driver.h"
#include "UART.h"

void UART_Init(unsigned short uart,unsigned long BR ){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	; 0x40
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
	// INIT UART
	//Enable the alternate function for PINs
	__disable_irq();
	RCC->APB2ENR |= 1;
 8000a84:	4b5f      	ldr	r3, [pc, #380]	; (8000c04 <UART_Init+0x190>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a5e      	ldr	r2, [pc, #376]	; (8000c04 <UART_Init+0x190>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6193      	str	r3, [r2, #24]

	USART_TypeDef * USARTx[] = {USART1,USART2,USART3};
 8000a90:	4a5d      	ldr	r2, [pc, #372]	; (8000c08 <UART_Init+0x194>)
 8000a92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	unsigned long ENR []= {(1<<14), (1<<17), (1<<18)};
 8000a9c:	4a5b      	ldr	r2, [pc, #364]	; (8000c0c <UART_Init+0x198>)
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//if we use uart1 clock is 72MHZ else 36MHZ
	//UART1 PA9 (Tx),PA10 (Rx)
	//UART2 PA2 (Tx),PA3 (Rx)
	//UART3 PB10 (Tx),PB11 (Rx)
	char Tx_Rx_pins [3][2] = {{9,10},{2,3},{10,11}};
 8000aa8:	4a59      	ldr	r2, [pc, #356]	; (8000c10 <UART_Init+0x19c>)
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab2:	6018      	str	r0, [r3, #0]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	8019      	strh	r1, [r3, #0]

	volatile uint32_t * APB[] = {&(RCC->APB2ENR),&(RCC->APB1ENR),&(RCC->APB1ENR)};
 8000ab8:	4a56      	ldr	r2, [pc, #344]	; (8000c14 <UART_Init+0x1a0>)
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//enable Clock for the related UART
	*(APB[uart-1]) |= ENR[uart-1];
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ace:	4413      	add	r3, r2
 8000ad0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000ad4:	6819      	ldr	r1, [r3, #0]
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ae0:	4413      	add	r3, r2
 8000ae2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000af0:	4403      	add	r3, r0
 8000af2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000af6:	430a      	orrs	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]

	unsigned char P [] = {PA, PA, PB};
 8000afa:	4a47      	ldr	r2, [pc, #284]	; (8000c18 <UART_Init+0x1a4>)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	4611      	mov	r1, r2
 8000b04:	8019      	strh	r1, [r3, #0]
 8000b06:	3302      	adds	r3, #2
 8000b08:	0c12      	lsrs	r2, r2, #16
 8000b0a:	701a      	strb	r2, [r3, #0]

	init_GP((P[uart-1]), Tx_Rx_pins[uart-1][0], OUT50, O_AF_PP);
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b14:	4413      	add	r3, r2
 8000b16:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000b1a:	b298      	uxth	r0, r3
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b26:	4413      	add	r3, r2
 8000b28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	2302      	movs	r3, #2
 8000b30:	2203      	movs	r2, #3
 8000b32:	f000 fa3d 	bl	8000fb0 <init_GP>
	init_GP((P[uart-1]), Tx_Rx_pins[uart-1][1], IN, I_PP);
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b3e:	4413      	add	r3, r2
 8000b40:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000b44:	b298      	uxth	r0, r3
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b50:	4413      	add	r3, r2
 8000b52:	f813 3c23 	ldrb.w	r3, [r3, #-35]
 8000b56:	b299      	uxth	r1, r3
 8000b58:	2302      	movs	r3, #2
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f000 fa28 	bl	8000fb0 <init_GP>

	unsigned long UART_BR = UART_BRR_CALC(BR);
 8000b60:	6838      	ldr	r0, [r7, #0]
 8000b62:	f000 f85d 	bl	8000c20 <UART_BRR_CALC>
 8000b66:	63f8      	str	r0, [r7, #60]	; 0x3c

	USARTx[uart-1]->BRR = UART_BR;
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b72:	4413      	add	r3, r2
 8000b74:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b7a:	609a      	str	r2, [r3, #8]

	//Enable interrup section--|enable RXNE		| enable TXE
	USARTx[uart-1]->CR1 	|= 	(1<<5) 			;
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b86:	4413      	add	r3, r2
 8000b88:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b8c:	68da      	ldr	r2, [r3, #12]
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b98:	440b      	add	r3, r1
 8000b9a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b9e:	f042 0220 	orr.w	r2, r2, #32
 8000ba2:	60da      	str	r2, [r3, #12]

	//Enable UART Transmit
	//------------------| Tx Enable | Rx Enable | Uart Enable
	USARTx[uart-1]->CR1 |= (1<<3) 	| (1<<2) 	| (1<<13);
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bae:	4413      	add	r3, r2
 8000bb0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000bb4:	68d9      	ldr	r1, [r3, #12]
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bc0:	4413      	add	r3, r2
 8000bc2:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000bc6:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 8000bca:	f043 030c 	orr.w	r3, r3, #12
 8000bce:	60d3      	str	r3, [r2, #12]


	IRQn_Type nvics[] = {USART1_IRQn,USART2_IRQn,USART3_IRQn};
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <UART_Init+0x1a8>)
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	8019      	strh	r1, [r3, #0]
 8000bdc:	3302      	adds	r3, #2
 8000bde:	0c12      	lsrs	r2, r2, #16
 8000be0:	701a      	strb	r2, [r3, #0]

	NVIC_EnableIRQ(nvics[uart-1]);//enable Uart interrupt
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bea:	4413      	add	r3, r2
 8000bec:	f913 3c38 	ldrsb.w	r3, [r3, #-56]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff23 	bl	8000a3c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bf6:	b662      	cpsie	i
}
 8000bf8:	bf00      	nop
	//
	//	//Enable UART
	//	USARTx->CR1 |= (1<<13);
 *
 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3740      	adds	r7, #64	; 0x40
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000
 8000c08:	08001768 	.word	0x08001768
 8000c0c:	08001774 	.word	0x08001774
 8000c10:	08001780 	.word	0x08001780
 8000c14:	08001788 	.word	0x08001788
 8000c18:	08001794 	.word	0x08001794
 8000c1c:	08001798 	.word	0x08001798

08000c20 <UART_BRR_CALC>:

unsigned long UART_BRR_CALC(unsigned long BR ){
 8000c20:	b5b0      	push	{r4, r5, r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	unsigned long div = 8000000;
 8000c28:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <UART_BRR_CALC+0xf8>)
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned long dec;
	unsigned long final;

	double fraq = 8000000.00;
 8000c2c:	a338      	add	r3, pc, #224	; (adr r3, 8000d10 <UART_BRR_CALC+0xf0>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double fraq2 = 1.00;
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <UART_BRR_CALC+0xfc>)
 8000c3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	div /= (BR * 16);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
	fraq = 16*(fraq/(BR * 16) - div);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	011b      	lsls	r3, r3, #4
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fbbf 	bl	80003d4 <__aeabi_ui2d>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c5e:	f7ff fd5d 	bl	800071c <__aeabi_ddiv>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4614      	mov	r4, r2
 8000c68:	461d      	mov	r5, r3
 8000c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c6c:	f7ff fbb2 	bl	80003d4 <__aeabi_ui2d>
 8000c70:	4602      	mov	r2, r0
 8000c72:	460b      	mov	r3, r1
 8000c74:	4620      	mov	r0, r4
 8000c76:	4629      	mov	r1, r5
 8000c78:	f7ff fa6e 	bl	8000158 <__aeabi_dsub>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4610      	mov	r0, r2
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 0200 	mov.w	r2, #0
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <UART_BRR_CALC+0x100>)
 8000c8a:	f7ff fc1d 	bl	80004c8 <__aeabi_dmul>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	e9c7 2306 	strd	r2, r3, [r7, #24]
	dec = fraq;
 8000c96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c9a:	f7ff feaf 	bl	80009fc <__aeabi_d2uiz>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	623b      	str	r3, [r7, #32]
	fraq2 = 100*(fraq-dec);
 8000ca2:	6a38      	ldr	r0, [r7, #32]
 8000ca4:	f7ff fb96 	bl	80003d4 <__aeabi_ui2d>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cb0:	f7ff fa52 	bl	8000158 <__aeabi_dsub>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	4610      	mov	r0, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <UART_BRR_CALC+0x104>)
 8000cc2:	f7ff fc01 	bl	80004c8 <__aeabi_dmul>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(fraq2 >50){
 8000cce:	f04f 0200 	mov.w	r2, #0
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <UART_BRR_CALC+0x108>)
 8000cd4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cd8:	f7ff fe86 	bl	80009e8 <__aeabi_dcmpgt>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00a      	beq.n	8000cf8 <UART_BRR_CALC+0xd8>
		dec++;
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
		if(dec == 16){
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	2b10      	cmp	r3, #16
 8000cec:	d104      	bne.n	8000cf8 <UART_BRR_CALC+0xd8>
			dec=0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
			div++;
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	final = (div<<4);
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	60fb      	str	r3, [r7, #12]
	final += dec;
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	6a3b      	ldr	r3, [r7, #32]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
	return final;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3728      	adds	r7, #40	; 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d10:	00000000 	.word	0x00000000
 8000d14:	415e8480 	.word	0x415e8480
 8000d18:	007a1200 	.word	0x007a1200
 8000d1c:	3ff00000 	.word	0x3ff00000
 8000d20:	40300000 	.word	0x40300000
 8000d24:	40590000 	.word	0x40590000
 8000d28:	40490000 	.word	0x40490000

08000d2c <UART_Rx>:

char UART_Rx(unsigned short uart){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
	USART_TypeDef * USARTx[] = {USART1,USART2,USART3};
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <UART_Rx+0x50>)
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	while( !(USARTx[uart-1]->SR & (1<<5)));
 8000d42:	bf00      	nop
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	f107 0218 	add.w	r2, r7, #24
 8000d4e:	4413      	add	r3, r2
 8000d50:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0320 	and.w	r3, r3, #32
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f2      	beq.n	8000d44 <UART_Rx+0x18>

	return USARTx[uart-1]->DR ;
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	f107 0218 	add.w	r2, r7, #24
 8000d68:	4413      	add	r3, r2
 8000d6a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	b2db      	uxtb	r3, r3

		c = USART3->DR;
	}
	return c;
	*/
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	371c      	adds	r7, #28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	08001768 	.word	0x08001768

08000d80 <UART_Tx>:

void UART_Tx(unsigned short uart,char c){
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	460a      	mov	r2, r1
 8000d8a:	80fb      	strh	r3, [r7, #6]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	717b      	strb	r3, [r7, #5]

	USART_TypeDef * USARTx[] = {USART1,USART2,USART3};
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <UART_Tx+0x58>)
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d98:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	USARTx[uart-1]->DR = c;
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	f107 0218 	add.w	r2, r7, #24
 8000da6:	4413      	add	r3, r2
 8000da8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000dac:	797a      	ldrb	r2, [r7, #5]
 8000dae:	605a      	str	r2, [r3, #4]

	while( !(USARTx[uart-1]->SR & (1<<6))){
 8000db0:	bf00      	nop
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	f107 0218 	add.w	r2, r7, #24
 8000dbc:	4413      	add	r3, r2
 8000dbe:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f2      	beq.n	8000db2 <UART_Tx+0x32>
		while( (USART3->SR & (1<<7)) ){
			USART3->DR = 0x00;
		};
	}
	*/
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	371c      	adds	r7, #28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	08001768 	.word	0x08001768

08000ddc <UART_Tx_Stream>:

void UART_Tx_Stream(unsigned short uart, char str[]){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	80fb      	strh	r3, [r7, #6]

	int i=0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 	while(str[i] != '\0'){
 8000dec:	e00b      	b.n	8000e06 <UART_Tx_Stream+0x2a>
		UART_Tx(uart, str[i++]);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	60fa      	str	r2, [r7, #12]
 8000df4:	461a      	mov	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffbd 	bl	8000d80 <UART_Tx>
 	while(str[i] != '\0'){
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1ed      	bne.n	8000dee <UART_Tx_Stream+0x12>
//		DelayMs(2);
	}

}
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <UART_ISR>:

void UART_ISR(unsigned short uart, unsigned short uart_mgr[],char * str){
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	81fb      	strh	r3, [r7, #14]
	//if bridge = 0 receive and save to the buffer
	//else then bridge send to the brige, the received from uart
	if(uart_mgr[2]==0){
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d138      	bne.n	8000ea6 <UART_ISR+0x8a>
		str[uart_mgr[0]] = UART_Rx(uart);
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	189c      	adds	r4, r3, r2
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff73 	bl	8000d2c <UART_Rx>
 8000e46:	4603      	mov	r3, r0
 8000e48:	7023      	strb	r3, [r4, #0]
		if(uart_mgr[3] ){
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	3306      	adds	r3, #6
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d01a      	beq.n	8000e8a <UART_ISR+0x6e>
			//terminator strategy (receive untill the terminator found then send)
			if(str[uart_mgr[0]] == uart_mgr[4]){
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3308      	adds	r3, #8
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d107      	bne.n	8000e7c <UART_ISR+0x60>
				uart_mgr[0]=0;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	801a      	strh	r2, [r3, #0]
				uart_mgr[1]=1;
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3302      	adds	r3, #2
 8000e76:	2201      	movs	r2, #1
 8000e78:	801a      	strh	r2, [r3, #0]
			systick_interrupt_start();
		}
	}else{
		UART_Tx(uart_mgr[2], UART_Rx(uart));
	}
}
 8000e7a:	e020      	b.n	8000ebe <UART_ISR+0xa2>
				uart_mgr[0]++;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	801a      	strh	r2, [r3, #0]
}
 8000e88:	e019      	b.n	8000ebe <UART_ISR+0xa2>
			uart_mgr[0]++;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	801a      	strh	r2, [r3, #0]
			uart_mgr[6] = uart_mgr[5];
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	330c      	adds	r3, #12
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	8952      	ldrh	r2, [r2, #10]
 8000e9e:	801a      	strh	r2, [r3, #0]
			systick_interrupt_start();
 8000ea0:	f000 f812 	bl	8000ec8 <systick_interrupt_start>
}
 8000ea4:	e00b      	b.n	8000ebe <UART_ISR+0xa2>
		UART_Tx(uart_mgr[2], UART_Rx(uart));
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	881c      	ldrh	r4, [r3, #0]
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff3c 	bl	8000d2c <UART_Rx>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f7ff ff61 	bl	8000d80 <UART_Tx>
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}
	...

08000ec8 <systick_interrupt_start>:
void systick_interrupt_start(){
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
	//will generate an interrupt
	__disable_irq();
	SysTick->CTRL = 0;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <systick_interrupt_start+0x34>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <systick_interrupt_start+0x34>)
 8000ed8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000edc:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <systick_interrupt_start+0x34>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 7;//fires the interrupt
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <systick_interrupt_start+0x34>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <systick_interrupt_start+0x34>)
 8000eea:	f043 0307 	orr.w	r3, r3, #7
 8000eee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ef0:	b662      	cpsie	i
}
 8000ef2:	bf00      	nop
	//and inside the SysTick_Handler we call the systick_int function
	__enable_irq();
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <systick_int>:

void systick_int(unsigned short uart_1_mgr[],unsigned short uart_2_mgr[],unsigned short uart_3_mgr[]){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]

	if(uart_1_mgr[0]!=0){
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d015      	beq.n	8000f40 <systick_int+0x40>
		if(uart_1_mgr[6] == 0){
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	330c      	adds	r3, #12
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d109      	bne.n	8000f32 <systick_int+0x32>
			uart_1_mgr[0] = 0;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	801a      	strh	r2, [r3, #0]
			uart_1_mgr[1] = 1;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3302      	adds	r3, #2
 8000f28:	2201      	movs	r2, #1
 8000f2a:	801a      	strh	r2, [r3, #0]
			Systic_init();
 8000f2c:	f000 f8c8 	bl	80010c0 <Systic_init>
			Systic_init();
		}else{
			uart_3_mgr[6]--;
		}
	}
}
 8000f30:	e039      	b.n	8000fa6 <systick_int+0xa6>
			uart_1_mgr[6]--;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	330c      	adds	r3, #12
 8000f36:	881a      	ldrh	r2, [r3, #0]
 8000f38:	3a01      	subs	r2, #1
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	801a      	strh	r2, [r3, #0]
}
 8000f3e:	e032      	b.n	8000fa6 <systick_int+0xa6>
	}else if(uart_2_mgr[0]!=0){
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d015      	beq.n	8000f74 <systick_int+0x74>
		if(uart_2_mgr[6] == 0){
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	330c      	adds	r3, #12
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d109      	bne.n	8000f66 <systick_int+0x66>
			uart_2_mgr[0] = 0;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2200      	movs	r2, #0
 8000f56:	801a      	strh	r2, [r3, #0]
			uart_2_mgr[1] = 1;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	801a      	strh	r2, [r3, #0]
			Systic_init();
 8000f60:	f000 f8ae 	bl	80010c0 <Systic_init>
}
 8000f64:	e01f      	b.n	8000fa6 <systick_int+0xa6>
			uart_2_mgr[6]--;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	330c      	adds	r3, #12
 8000f6a:	881a      	ldrh	r2, [r3, #0]
 8000f6c:	3a01      	subs	r2, #1
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	801a      	strh	r2, [r3, #0]
}
 8000f72:	e018      	b.n	8000fa6 <systick_int+0xa6>
	}else if(uart_3_mgr[0]!=0){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d014      	beq.n	8000fa6 <systick_int+0xa6>
		if(uart_3_mgr[6] == 0){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	330c      	adds	r3, #12
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d109      	bne.n	8000f9a <systick_int+0x9a>
			uart_3_mgr[0] = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	801a      	strh	r2, [r3, #0]
			uart_3_mgr[1] = 1;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3302      	adds	r3, #2
 8000f90:	2201      	movs	r2, #1
 8000f92:	801a      	strh	r2, [r3, #0]
			Systic_init();
 8000f94:	f000 f894 	bl	80010c0 <Systic_init>
}
 8000f98:	e005      	b.n	8000fa6 <systick_int+0xa6>
			uart_3_mgr[6]--;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	330c      	adds	r3, #12
 8000f9e:	881a      	ldrh	r2, [r3, #0]
 8000fa0:	3a01      	subs	r2, #1
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	801a      	strh	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <init_GP>:

#include "gp_driver.h"
#include "stm32f1xx_hal.h"

void init_GP(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8000fb0:	b490      	push	{r4, r7}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	4608      	mov	r0, r1
 8000fba:	4611      	mov	r1, r2
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	80fb      	strh	r3, [r7, #6]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80bb      	strh	r3, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	807b      	strh	r3, [r7, #2]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	803b      	strh	r3, [r7, #0]
	// volatile unsigned long * CR;
	unsigned short tPIN = pin;
 8000fce:	88bb      	ldrh	r3, [r7, #4]
 8000fd0:	83fb      	strh	r3, [r7, #30]
	unsigned short offset = 0x00;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	83bb      	strh	r3, [r7, #28]

	if(pin > 7)
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	2b07      	cmp	r3, #7
 8000fda:	d904      	bls.n	8000fe6 <init_GP+0x36>
	{
		tPIN -= 8;
 8000fdc:	8bfb      	ldrh	r3, [r7, #30]
 8000fde:	3b08      	subs	r3, #8
 8000fe0:	83fb      	strh	r3, [r7, #30]
		offset = 0x01;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	83bb      	strh	r3, [r7, #28]
	}

	volatile unsigned long *CRL_or_CRH[] = {&GPIO_A+offset,&GPIO_B+offset,&GPIO_C+offset};
 8000fe6:	8bbb      	ldrh	r3, [r7, #28]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fee:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	8bbb      	ldrh	r3, [r7, #28]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ffc:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	8bbb      	ldrh	r3, [r7, #28]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800100a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800100e:	61bb      	str	r3, [r7, #24]
	char RCCValues[] = {4,8,0x10};
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <init_GP+0x108>)
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	4611      	mov	r1, r2
 800101a:	8019      	strh	r1, [r3, #0]
 800101c:	3302      	adds	r3, #2
 800101e:	0c12      	lsrs	r2, r2, #16
 8001020:	701a      	strb	r2, [r3, #0]

	RCC_APB2ENR |= RCCValues[port-1];
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <init_GP+0x10c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	88fa      	ldrh	r2, [r7, #6]
 8001028:	3a01      	subs	r2, #1
 800102a:	f107 0120 	add.w	r1, r7, #32
 800102e:	440a      	add	r2, r1
 8001030:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001034:	4611      	mov	r1, r2
 8001036:	4a21      	ldr	r2, [pc, #132]	; (80010bc <init_GP+0x10c>)
 8001038:	430b      	orrs	r3, r1
 800103a:	6013      	str	r3, [r2, #0]

	*CRL_or_CRH[port-1] &= ~(0xf<<(tPIN)*4); ///Reset the below pins
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	3b01      	subs	r3, #1
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	f107 0220 	add.w	r2, r7, #32
 8001046:	4413      	add	r3, r2
 8001048:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	8bfb      	ldrh	r3, [r7, #30]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	210f      	movs	r1, #15
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	4619      	mov	r1, r3
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	3b01      	subs	r3, #1
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	f107 0020 	add.w	r0, r7, #32
 8001066:	4403      	add	r3, r0
 8001068:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800106c:	400a      	ands	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
	*CRL_or_CRH[port-1] |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //// Set up the direction and the option of the PIN
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	3b01      	subs	r3, #1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	f107 0220 	add.w	r2, r7, #32
 800107a:	4413      	add	r3, r2
 800107c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	8879      	ldrh	r1, [r7, #2]
 8001084:	8bfb      	ldrh	r3, [r7, #30]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4099      	lsls	r1, r3
 800108a:	8838      	ldrh	r0, [r7, #0]
 800108c:	8bfb      	ldrh	r3, [r7, #30]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	fa00 f303 	lsl.w	r3, r0, r3
 8001096:	430b      	orrs	r3, r1
 8001098:	4619      	mov	r1, r3
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	3b01      	subs	r3, #1
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	f107 0020 	add.w	r0, r7, #32
 80010a4:	4403      	add	r3, r0
 80010a6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
//		{
//			RCC_APB2ENR |= 0x10; //// Enabling PORT C
//			CR = (volatile unsigned long *) (&GPIO_C + offset);
//		}
*/
}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc90      	pop	{r4, r7}
 80010b6:	4770      	bx	lr
 80010b8:	0800179c 	.word	0x0800179c
 80010bc:	40021018 	.word	0x40021018

080010c0 <Systic_init>:
{
	for(;time>0;time--)
	 for(int t=0;t<100000;t++);
}

void Systic_init(void){
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

	SysTick->CTRL = 5;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <Systic_init+0x14>)
 80010c6:	2205      	movs	r2, #5
 80010c8:	601a      	str	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <DelayMillis>:

void DelayMillis(void){
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	SysTick->LOAD = 8000-1;//wait one milli second if clock  == 72Mhz = 72*10^6 =1s 72*10^3 =1ms
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <DelayMillis+0x2c>)
 80010de:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010e2:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;//register that is going to decrement till reaching zero which triggers a flag
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <DelayMillis+0x2c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);//reach zero value in Val register
 80010ea:	bf00      	nop
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <DelayMillis+0x2c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f9      	beq.n	80010ec <DelayMillis+0x14>
	//== 1 when counted to 0 since last time this was read.
	//== 0 not reached to zero
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <DelayMs>:

void DelayMs(unsigned long t){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	for(;t>0;t--)
 8001110:	e004      	b.n	800111c <DelayMs+0x14>
	{
		DelayMillis();
 8001112:	f7ff ffe1 	bl	80010d8 <DelayMillis>
	for(;t>0;t--)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3b01      	subs	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f7      	bne.n	8001112 <DelayMs+0xa>
	}
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <str_empty>:
 * help_func.c
 *
 *  Created on: Sep 30, 2021
 *      Author: root
 */
void str_empty(char str[]){
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	int i=0;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
	while(str[i] != '\0'){
 8001138:	e007      	b.n	800114a <str_empty+0x1e>
		str[i] = '\0';
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
		i++;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
	while(str[i] != '\0'){
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f1      	bne.n	800113a <str_empty+0xe>
	}
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <len_str>:

int len_str(char str[]){
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	int len = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
	while(str[len++] !='\0');
 800116e:	bf00      	nop
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	60fa      	str	r2, [r7, #12]
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f6      	bne.n	8001170 <len_str+0xe>
	return len-1;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3b01      	subs	r3, #1
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <find_str>:

int find_str(char str1[],char str2[]){
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	int match=0;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]

	int strlen = len_str(str1);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffdf 	bl	8001162 <len_str>
 80011a4:	60f8      	str	r0, [r7, #12]
	int test=0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]

	for(int i=0;((str2[i+strlen-1] != '\0') | (str2[i+strlen] != '\0')) & (match==0);i++){
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	e024      	b.n	80011fa <find_str+0x6a>
		for(int j=0;j<=strlen;j++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	e018      	b.n	80011e8 <find_str+0x58>
			if(str1[j] == str2[i+j]){
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	6979      	ldr	r1, [r7, #20]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	440b      	add	r3, r1
 80011c4:	4619      	mov	r1, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	440b      	add	r3, r1
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d108      	bne.n	80011e2 <find_str+0x52>
				test++;
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	3301      	adds	r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
				if(test== strlen){
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d101      	bne.n	80011e2 <find_str+0x52>
					match=1;
 80011de:	2301      	movs	r3, #1
 80011e0:	61fb      	str	r3, [r7, #28]
		for(int j=0;j<=strlen;j++){
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	3301      	adds	r3, #1
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dde2      	ble.n	80011b6 <find_str+0x26>
				}
			}
		}
		test=0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
	for(int i=0;((str2[i+strlen-1] != '\0') | (str2[i+strlen] != '\0')) & (match==0);i++){
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	3b01      	subs	r3, #1
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	4413      	add	r3, r2
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	6979      	ldr	r1, [r7, #20]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	440b      	add	r3, r1
 800120e:	4619      	mov	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	440b      	add	r3, r1
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4313      	orrs	r3, r2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf14      	ite	ne
 800121e:	2301      	movne	r3, #1
 8001220:	2300      	moveq	r3, #0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b00      	cmp	r3, #0
 8001228:	bf0c      	ite	eq
 800122a:	2301      	moveq	r3, #1
 800122c:	2300      	movne	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4013      	ands	r3, r2
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1bb      	bne.n	80011b0 <find_str+0x20>
	}

	return match;
 8001238:	69fb      	ldr	r3, [r7, #28]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <find_strL>:

int find_strL(char str1[],char str2[]){
 8001242:	b590      	push	{r4, r7, lr}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
	int res=0;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
	if((len_str(str1) == len_str(str2)) & find_str(str1, str2)){
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff86 	bl	8001162 <len_str>
 8001256:	4604      	mov	r4, r0
 8001258:	6838      	ldr	r0, [r7, #0]
 800125a:	f7ff ff82 	bl	8001162 <len_str>
 800125e:	4603      	mov	r3, r0
 8001260:	429c      	cmp	r4, r3
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461c      	mov	r4, r3
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff8e 	bl	8001190 <find_str>
 8001274:	4603      	mov	r3, r0
 8001276:	4023      	ands	r3, r4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <find_strL+0x3e>
		res = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
	}
	return res;
 8001280:	68fb      	ldr	r3, [r7, #12]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}

0800128a <concatenate>:

void concatenate(char str1[], char str2[]){
 800128a:	b480      	push	{r7}
 800128c:	b085      	sub	sp, #20
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
	int i=0;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
	int j=0;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
	while(str1[i++]!='\0');
 800129c:	bf00      	nop
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	60fa      	str	r2, [r7, #12]
 80012a4:	461a      	mov	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f6      	bne.n	800129e <concatenate+0x14>

	i--;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
	while(str2[j]!='\0'){
 80012b6:	e00d      	b.n	80012d4 <concatenate+0x4a>
		str1[i+j] = str2[j];
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	441a      	add	r2, r3
 80012be:	68f9      	ldr	r1, [r7, #12]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	440b      	add	r3, r1
 80012c4:	4619      	mov	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	440b      	add	r3, r1
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	701a      	strb	r2, [r3, #0]
		j++;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
	while(str2[j]!='\0'){
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1eb      	bne.n	80012b8 <concatenate+0x2e>
	}
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <int2char>:

void int2char(int num, char str[]){
 80012ec:	b480      	push	{r7}
 80012ee:	b08f      	sub	sp, #60	; 0x3c
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	char lstr[30];
	int cnt=0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
	int div=10;
 80012fa:	230a      	movs	r3, #10
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int j=0;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30

	while(num>=div){
 8001302:	e01b      	b.n	800133c <int2char+0x50>
		lstr[cnt] = num % div + 0x30;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001308:	fb93 f2f2 	sdiv	r2, r3, r2
 800130c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800130e:	fb01 f202 	mul.w	r2, r1, r2
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	3330      	adds	r3, #48	; 0x30
 8001318:	b2d9      	uxtb	r1, r3
 800131a:	f107 020c 	add.w	r2, r7, #12
 800131e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001320:	4413      	add	r3, r2
 8001322:	460a      	mov	r2, r1
 8001324:	701a      	strb	r2, [r3, #0]
		num/=10;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a19      	ldr	r2, [pc, #100]	; (8001390 <int2char+0xa4>)
 800132a:	fb82 1203 	smull	r1, r2, r2, r3
 800132e:	1092      	asrs	r2, r2, #2
 8001330:	17db      	asrs	r3, r3, #31
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	607b      	str	r3, [r7, #4]
		cnt++;
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	3301      	adds	r3, #1
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
	while(num>=div){
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	429a      	cmp	r2, r3
 8001342:	dadf      	bge.n	8001304 <int2char+0x18>
	}
	lstr[cnt] = num+0x30;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	3330      	adds	r3, #48	; 0x30
 800134a:	b2d9      	uxtb	r1, r3
 800134c:	f107 020c 	add.w	r2, r7, #12
 8001350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001352:	4413      	add	r3, r2
 8001354:	460a      	mov	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
	for(j=cnt;j >= 0;j--){
 8001358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
 800135c:	e00e      	b.n	800137c <int2char+0x90>
		str[cnt-j] = lstr[j];
 800135e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	461a      	mov	r2, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	4413      	add	r3, r2
 800136a:	f107 010c 	add.w	r1, r7, #12
 800136e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001370:	440a      	add	r2, r1
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	701a      	strb	r2, [r3, #0]
	for(j=cnt;j >= 0;j--){
 8001376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001378:	3b01      	subs	r3, #1
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
 800137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137e:	2b00      	cmp	r3, #0
 8001380:	daed      	bge.n	800135e <int2char+0x72>
	}
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	373c      	adds	r7, #60	; 0x3c
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	66666667 	.word	0x66666667

08001394 <char2int>:

int char2int(char str[]){
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	int res=0;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
	int stop = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
	int strlen = len_str(str);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fedc 	bl	8001162 <len_str>
 80013aa:	6138      	str	r0, [r7, #16]
	int j=0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
	char check[2]={0};
 80013b0:	2300      	movs	r3, #0
 80013b2:	81bb      	strh	r3, [r7, #12]

	for(j=0;j<strlen;j++){
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e013      	b.n	80013e2 <char2int+0x4e>
		check[0] = str[j];
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	733b      	strb	r3, [r7, #12]
		if(find_str(check,"0123456789") == 0){
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4917      	ldr	r1, [pc, #92]	; (8001428 <char2int+0x94>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fee0 	bl	8001190 <find_str>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <char2int+0x48>
			stop=1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
			break;
 80013da:	e006      	b.n	80013ea <char2int+0x56>
	for(j=0;j<strlen;j++){
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbe7      	blt.n	80013ba <char2int+0x26>
		}
	}
	if(stop==0){
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d116      	bne.n	800141e <char2int+0x8a>
		for(j=0;j<strlen;j++){
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00f      	b.n	8001416 <char2int+0x82>
			res  = res*10 + (str[j] - 0x30);
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4619      	mov	r1, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	3b30      	subs	r3, #48	; 0x30
 800140c:	440b      	add	r3, r1
 800140e:	61fb      	str	r3, [r7, #28]
		for(j=0;j<strlen;j++){
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	429a      	cmp	r2, r3
 800141c:	dbeb      	blt.n	80013f6 <char2int+0x62>
		}
	}

	return res;
 800141e:	69fb      	ldr	r3, [r7, #28]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	080017b8 	.word	0x080017b8

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a4:	f7ff ffc2 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <main>:
unsigned short Uart_3_mgr[7]={0,0,0,0,'\n',0,0};

int process = 0;

int main (void)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b097      	sub	sp, #92	; 0x5c
 80014c8:	af00      	add	r7, sp, #0
	//****************************| NON CRC CODE |*********************
	SysTick_Config(SystemCoreClock / 1000);
 80014ca:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <main+0x100>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a3e      	ldr	r2, [pc, #248]	; (80015c8 <main+0x104>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	099b      	lsrs	r3, r3, #6
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffd2 	bl	8001480 <SysTick_Config>
	Systic_init();
 80014dc:	f7ff fdf0 	bl	80010c0 <Systic_init>
	//*****************************************************************
	UART_Init(Uart2,9600);
 80014e0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80014e4:	2002      	movs	r0, #2
 80014e6:	f7ff fac5 	bl	8000a74 <UART_Init>
	UART_Init(Uart3,9600);
 80014ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80014ee:	2003      	movs	r0, #3
 80014f0:	f7ff fac0 	bl	8000a74 <UART_Init>

//	char* newstr = "Welcome guys, how are you ?\r\n";

	DelayMs(100);
 80014f4:	2064      	movs	r0, #100	; 0x64
 80014f6:	f7ff fe07 	bl	8001108 <DelayMs>

	UART_Tx_Stream(2,"This is UART 2");
 80014fa:	4934      	ldr	r1, [pc, #208]	; (80015cc <main+0x108>)
 80014fc:	2002      	movs	r0, #2
 80014fe:	f7ff fc6d 	bl	8000ddc <UART_Tx_Stream>
	UART_Tx_Stream(3,"This is UART 3");
 8001502:	4933      	ldr	r1, [pc, #204]	; (80015d0 <main+0x10c>)
 8001504:	2003      	movs	r0, #3
 8001506:	f7ff fc69 	bl	8000ddc <UART_Tx_Stream>

	while(1)
	{
		//UART_Tx_Stream(Uart2,newstr);

		if(Uart_2_mgr[1] == 1){
 800150a:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <main+0x110>)
 800150c:	885b      	ldrh	r3, [r3, #2]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d149      	bne.n	80015a6 <main+0xe2>
			UART_Tx_Stream(Uart3, Uart_2_msg);
 8001512:	4931      	ldr	r1, [pc, #196]	; (80015d8 <main+0x114>)
 8001514:	2003      	movs	r0, #3
 8001516:	f7ff fc61 	bl	8000ddc <UART_Tx_Stream>
			process = find_strL("hazem", "hazem");
 800151a:	4930      	ldr	r1, [pc, #192]	; (80015dc <main+0x118>)
 800151c:	482f      	ldr	r0, [pc, #188]	; (80015dc <main+0x118>)
 800151e:	f7ff fe90 	bl	8001242 <find_strL>
 8001522:	4603      	mov	r3, r0
 8001524:	4a2e      	ldr	r2, [pc, #184]	; (80015e0 <main+0x11c>)
 8001526:	6013      	str	r3, [r2, #0]

			char str1[50] = {"hi there, "};
 8001528:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <main+0x120>)
 800152a:	463b      	mov	r3, r7
 800152c:	ca07      	ldmia	r2, {r0, r1, r2}
 800152e:	c303      	stmia	r3!, {r0, r1}
 8001530:	801a      	strh	r2, [r3, #0]
 8001532:	3302      	adds	r3, #2
 8001534:	0c12      	lsrs	r2, r2, #16
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	f107 030b 	add.w	r3, r7, #11
 800153c:	2227      	movs	r2, #39	; 0x27
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f8fd 	bl	8001740 <memset>
			char str2[20] = {"how are you?"};
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <main+0x124>)
 8001548:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800154c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154e:	c407      	stmia	r4!, {r0, r1, r2}
 8001550:	7023      	strb	r3, [r4, #0]
 8001552:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f8c3 2003 	str.w	r2, [r3, #3]
			concatenate(str1, str2);
 800155e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001562:	463b      	mov	r3, r7
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fe8f 	bl	800128a <concatenate>

			char str3[10];
			int2char(1254,str3);
 800156c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001570:	4619      	mov	r1, r3
 8001572:	f240 40e6 	movw	r0, #1254	; 0x4e6
 8001576:	f7ff feb9 	bl	80012ec <int2char>

			int sa = char2int("1234");
 800157a:	481c      	ldr	r0, [pc, #112]	; (80015ec <main+0x128>)
 800157c:	f7ff ff0a 	bl	8001394 <char2int>
 8001580:	6578      	str	r0, [r7, #84]	; 0x54
			sa = char2int("6");
 8001582:	481b      	ldr	r0, [pc, #108]	; (80015f0 <main+0x12c>)
 8001584:	f7ff ff06 	bl	8001394 <char2int>
 8001588:	6578      	str	r0, [r7, #84]	; 0x54
			sa = char2int("124");
 800158a:	481a      	ldr	r0, [pc, #104]	; (80015f4 <main+0x130>)
 800158c:	f7ff ff02 	bl	8001394 <char2int>
 8001590:	6578      	str	r0, [r7, #84]	; 0x54
			sa = char2int("12348");
 8001592:	4819      	ldr	r0, [pc, #100]	; (80015f8 <main+0x134>)
 8001594:	f7ff fefe 	bl	8001394 <char2int>
 8001598:	6578      	str	r0, [r7, #84]	; 0x54

			Uart_2_mgr[1] =0;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <main+0x110>)
 800159c:	2200      	movs	r2, #0
 800159e:	805a      	strh	r2, [r3, #2]
			str_empty(Uart_2_msg);
 80015a0:	480d      	ldr	r0, [pc, #52]	; (80015d8 <main+0x114>)
 80015a2:	f7ff fdc3 	bl	800112c <str_empty>

		}

		if(Uart_3_mgr[1] == 1){
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <main+0x138>)
 80015a8:	885b      	ldrh	r3, [r3, #2]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d1ad      	bne.n	800150a <main+0x46>
			UART_Tx_Stream(Uart2, Uart_3_msg);
 80015ae:	4914      	ldr	r1, [pc, #80]	; (8001600 <main+0x13c>)
 80015b0:	2002      	movs	r0, #2
 80015b2:	f7ff fc13 	bl	8000ddc <UART_Tx_Stream>
			Uart_3_mgr[1]=0;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <main+0x138>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	805a      	strh	r2, [r3, #2]
			str_empty(Uart_3_msg);
 80015bc:	4810      	ldr	r0, [pc, #64]	; (8001600 <main+0x13c>)
 80015be:	f7ff fdb5 	bl	800112c <str_empty>
		if(Uart_2_mgr[1] == 1){
 80015c2:	e7a2      	b.n	800150a <main+0x46>
 80015c4:	20000020 	.word	0x20000020
 80015c8:	10624dd3 	.word	0x10624dd3
 80015cc:	080017c4 	.word	0x080017c4
 80015d0:	080017d4 	.word	0x080017d4
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000150 	.word	0x20000150
 80015dc:	080017e4 	.word	0x080017e4
 80015e0:	20000050 	.word	0x20000050
 80015e4:	08001804 	.word	0x08001804
 80015e8:	08001838 	.word	0x08001838
 80015ec:	080017ec 	.word	0x080017ec
 80015f0:	080017f4 	.word	0x080017f4
 80015f4:	080017f8 	.word	0x080017f8
 80015f8:	080017fc 	.word	0x080017fc
 80015fc:	20000010 	.word	0x20000010
 8001600:	20000054 	.word	0x20000054

08001604 <USART2_IRQHandler>:
		 * 3- if process : string to fullfill, cnt, signal
		 * */
	}
}

void USART2_IRQHandler(){
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	UART_ISR(2, Uart_2_mgr, Uart_2_msg);
 8001608:	4a03      	ldr	r2, [pc, #12]	; (8001618 <USART2_IRQHandler+0x14>)
 800160a:	4904      	ldr	r1, [pc, #16]	; (800161c <USART2_IRQHandler+0x18>)
 800160c:	2002      	movs	r0, #2
 800160e:	f7ff fc05 	bl	8000e1c <UART_ISR>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000150 	.word	0x20000150
 800161c:	20000000 	.word	0x20000000

08001620 <USART3_IRQHandler>:

void USART3_IRQHandler(){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	UART_ISR(3, Uart_3_mgr, Uart_3_msg);
 8001624:	4a03      	ldr	r2, [pc, #12]	; (8001634 <USART3_IRQHandler+0x14>)
 8001626:	4904      	ldr	r1, [pc, #16]	; (8001638 <USART3_IRQHandler+0x18>)
 8001628:	2003      	movs	r0, #3
 800162a:	f7ff fbf7 	bl	8000e1c <UART_ISR>
	 because of that problem we create the bridge concept where we receive all the data first in a buffer message
	 then on a certain buffer data which is '\n' we set a flag then in the main loop we check that flag and send the buffer
	 data if the flag is set in that way stream is been transmitted properly with no errors
	 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000054 	.word	0x20000054
 8001638:	20000010 	.word	0x20000010

0800163c <SysTick_Handler>:

void SysTick_Handler(){
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	systick_int(Uart_1_mgr, Uart_2_mgr, Uart_3_mgr);
 8001640:	4a03      	ldr	r2, [pc, #12]	; (8001650 <SysTick_Handler+0x14>)
 8001642:	4904      	ldr	r1, [pc, #16]	; (8001654 <SysTick_Handler+0x18>)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <SysTick_Handler+0x1c>)
 8001646:	f7ff fc5b 	bl	8000f00 <systick_int>
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000010 	.word	0x20000010
 8001654:	20000000 	.word	0x20000000
 8001658:	20000040 	.word	0x20000040

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
	...

080016ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ae:	490d      	ldr	r1, [pc, #52]	; (80016e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c4:	4c0a      	ldr	r4, [pc, #40]	; (80016f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016d2:	f7ff ffe4 	bl	800169e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f000 f80f 	bl	80016f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016da:	f7ff fef3 	bl	80014c4 <main>
  bx lr
 80016de:	4770      	bx	lr
  ldr r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80016e8:	08001854 	.word	0x08001854
  ldr r2, =_sbss
 80016ec:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80016f0:	2000024c 	.word	0x2000024c

080016f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC1_2_IRQHandler>
	...

080016f8 <__libc_init_array>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	2600      	movs	r6, #0
 80016fc:	4d0c      	ldr	r5, [pc, #48]	; (8001730 <__libc_init_array+0x38>)
 80016fe:	4c0d      	ldr	r4, [pc, #52]	; (8001734 <__libc_init_array+0x3c>)
 8001700:	1b64      	subs	r4, r4, r5
 8001702:	10a4      	asrs	r4, r4, #2
 8001704:	42a6      	cmp	r6, r4
 8001706:	d109      	bne.n	800171c <__libc_init_array+0x24>
 8001708:	f000 f822 	bl	8001750 <_init>
 800170c:	2600      	movs	r6, #0
 800170e:	4d0a      	ldr	r5, [pc, #40]	; (8001738 <__libc_init_array+0x40>)
 8001710:	4c0a      	ldr	r4, [pc, #40]	; (800173c <__libc_init_array+0x44>)
 8001712:	1b64      	subs	r4, r4, r5
 8001714:	10a4      	asrs	r4, r4, #2
 8001716:	42a6      	cmp	r6, r4
 8001718:	d105      	bne.n	8001726 <__libc_init_array+0x2e>
 800171a:	bd70      	pop	{r4, r5, r6, pc}
 800171c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001720:	4798      	blx	r3
 8001722:	3601      	adds	r6, #1
 8001724:	e7ee      	b.n	8001704 <__libc_init_array+0xc>
 8001726:	f855 3b04 	ldr.w	r3, [r5], #4
 800172a:	4798      	blx	r3
 800172c:	3601      	adds	r6, #1
 800172e:	e7f2      	b.n	8001716 <__libc_init_array+0x1e>
 8001730:	0800184c 	.word	0x0800184c
 8001734:	0800184c 	.word	0x0800184c
 8001738:	0800184c 	.word	0x0800184c
 800173c:	08001850 	.word	0x08001850

08001740 <memset>:
 8001740:	4603      	mov	r3, r0
 8001742:	4402      	add	r2, r0
 8001744:	4293      	cmp	r3, r2
 8001746:	d100      	bne.n	800174a <memset+0xa>
 8001748:	4770      	bx	lr
 800174a:	f803 1b01 	strb.w	r1, [r3], #1
 800174e:	e7f9      	b.n	8001744 <memset+0x4>

08001750 <_init>:
 8001750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001752:	bf00      	nop
 8001754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001756:	bc08      	pop	{r3}
 8001758:	469e      	mov	lr, r3
 800175a:	4770      	bx	lr

0800175c <_fini>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	bf00      	nop
 8001760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001762:	bc08      	pop	{r3}
 8001764:	469e      	mov	lr, r3
 8001766:	4770      	bx	lr
