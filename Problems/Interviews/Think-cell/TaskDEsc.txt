Task Description
interval_map<K,V> is a data structure that associates keys of type K with values of type V. It is designed to be used efficiently in situations where intervals of consecutive keys are associated with the same value. Your task is to implement the assign member function of this data structure, which is outlined below.

interval_map<K, V> is implemented on top of std::map. For more information on std::map, you may refer to cppreference.com.

Each key-value-pair (k,v) in interval_map<K,V>::m_map means that the value v is associated with all keys from k (including) to the next key (excluding) in m_map. The member interval_map<K,V>::m_valBegin holds the value that is associated with all keys less than the first key in m_map.

Example: Let M be an instance of interval_map<int,char> where

M.m_valBegin=='A',
M.m_map=={ (1,'B'), (3,'A') },
Then M represents the mapping

...
-2 -> 'A'
-1 -> 'A'
0 -> 'A'
1 -> 'B'
2 -> 'B'
3 -> 'A'
4 -> 'A'
5 -> 'A'
...
The representation in the std::map must be canonical, that is, consecutive map entries must not contain the same value: ..., (3,'A'), (5,'A'), ... is not allowed. Likewise, the first entry in m_map must not contain the same value as m_valBegin. Initially, the whole range of K is associated with a given initial value, passed to the constructor of the interval_map<K,V> data structure.

Key type K

besides being copyable and assignable, is less-than comparable via operator<, and
does not implement any other operations, in particular no equality comparison or arithmetic operators.
Value type V

besides being copyable and assignable, is equality-comparable via operator==, and
does not implement any other operations.
You are given the following source code:

#include <map>
template<typename K, typename V>
class interval_map {
	friend void IntervalMapTest();
	V m_valBegin;
	std::map<K,V> m_map;
public:
	// constructor associates whole range of K with val
	interval_map(V const& val)
	: m_valBegin(val)
	{}

	// Assign value val to interval [keyBegin, keyEnd).
	// Overwrite previous values in this interval.
	// Conforming to the C++ Standard Library conventions, the interval
	// includes keyBegin, but excludes keyEnd.
	// If !( keyBegin < keyEnd ), this designates an empty interval,
	// and assign must do nothing.
	void assign( K const& keyBegin, K const& keyEnd, V const& val ) {
        
        //Please insert your solution here

	}

	// look-up of the value associated with key
	V const& operator[]( K const& key ) const {
		auto it=m_map.upper_bound(key);
		if(it==m_map.begin()) {
			return m_valBegin;
		} else {
			return (--it)->second;
		}
	}
};

// Many solutions we receive are incorrect. Consider using a randomized test
// to discover the cases that your implementation does not handle correctly.
// We recommend to implement a test function that tests the functionality of
// the interval_map, for example using a map of int intervals to char.











#include <iostream>
#include <map>

using namespace std;

template<typename K, typename V>
class interval_map {
	friend void IntervalMapTest();
	V m_valBegin;
	std::map<K,V> m_map;
public:
	// constructor associates whole range of K with val
	interval_map(V const& val)
	: m_valBegin(val)
	{}

	// Assign value val to interval [keyBegin, keyEnd).
	// Overwrite previous values in this interval.
	// Conforming to the C++ Standard Library conventions, the interval
	// includes keyBegin, but excludes keyEnd.
	// If !( keyBegin < keyEnd ), this designates an empty interval,
	// and assign must do nothing.
	void assign( K const& keyBegin, K const& keyEnd, V const& val ) {
		// INSERT YOUR SOLUTION HERE
        /*The function assign should insert the interval [keyBegin, keyEnd] with val into the m_map.*/        
 
        if (!(keyBegin < keyEnd))
            return;

        //insert first dummy value to the map if it is empty
        if(m_map.size() == 0 ){
            m_map.insert( {std::numeric_limits<K>::lowest(), this->m_valBegin} );
        }
        
        //with empty map this will be the dummy value,then we will validate 
        auto next = --m_map.upper_bound(keyEnd);
        // auto second_insert = m_map.end();//container for second inserted pair
        
        //if inserted val is the same as the default val move to next item 
        if (m_valBegin == val)
            ++next;
        //if left intersection occur then insert val to keyEnd->val
        else if (next->first < keyEnd)
        {
            //new element inherites the val of lower key 
            //keep the value of left intersect to be deleted element
            next = m_map.emplace_hint(m_map.end(), keyEnd, next->second);
        }
        
        // move to the previoud of last element in the map
        auto prev = next;
        --prev;
        //if the highest key is greater than the keyBegin then find the upper to keyBegin
        if (keyBegin < prev->first)
            prev = --m_map.upper_bound(keyBegin);
        //if val of upper to keyBegin is equal to the val to be inserted 
        if (!(prev->second == val))
            if (prev->first < keyBegin)
                prev = m_map.emplace_hint(m_map.end(), keyBegin, val);
            else
                (--prev)->second == val;
        m_map.erase(++prev, next);//delete the element next to previous -- inside the interval (useless element)
	}

	// look-up of the value associated with key
	V const& operator[]( K const& key ) const {
		auto it=m_map.upper_bound(key);
		if(it==m_map.begin()) {
			return m_valBegin;
		} else {
			return (--it)->second;
		}
	}
};
#include <string>
void IntervalMapTest() {
    interval_map<int, string> im("\033[91mR");
    int count = 15;
    
    im.assign(2, 8, "\033[36mB");
    for (size_t i = 0; i < count; i++)
    {
        cout<<im[i]<<"\t";
    }
    cout<<endl;

    im.assign(10, 13, "\033[92mG");

    for (size_t i = 0; i < count; i++)
    {
        cout<<im[i]<<"\t";
    }
    cout<<endl;

    im.assign(1, 5, "\033[93mY");
    for (size_t i = 0; i < count; i++)
    {
        cout<<im[i]<<"\t";
    }
    cout<<endl;

    im.assign(3, 7, "\033[35mP");
    for (size_t i = 0; i < count; i++)
    {
        cout<<im[i]<<"\t";
    }

    cout<<endl;
    for (size_t i = 0; i < count; i++)
    {
        cout<<"\033[97m"<<i<<"\t";
    }

    cout<<endl;    
}

int main() {
    IntervalMapTest();
    return 0;
}

